


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	[System.Xml.Serialization.XmlRoot("ModuleObjectMember")]
	public partial class ModuleObjectMemberCollection  : ICollection
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
        private ArrayList m_oModuleObjectMemberList = new ArrayList();
		private int m_iPageSize = 10;
		private int m_iPageNumber = 1;
		#endregion
		#region Region: Constructor///////////////////////////////////////////////////////////////////
		public ModuleObjectMemberCollection()
		{
			m_iPageSize = 10;
			m_iPageNumber = 1;
		}
		#endregion
		#region Region: Properties///////////////////////////////////////////////////////////////////		
		public ModuleObjectMember this[int index]
        {
            get { return (ModuleObjectMember)m_oModuleObjectMemberList[index]; }
        }
        public int Count
        {
            get { return m_oModuleObjectMemberList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
		public int PageSize
        {
            get { return m_iPageSize; }
			set { m_iPageSize = value; }
        }
		public int PageNumber
        {
            get { return m_iPageNumber; }
			set { m_iPageNumber = value; }
        }
		#endregion
		#region Region: List Method///////////////////////////////////////////////////////////////////		
		public void Sort(IComparer oComparer)
		{
			m_oModuleObjectMemberList.Sort(oComparer);
		}

		public void Reverse()
		{
			m_oModuleObjectMemberList.Reverse();
		}

        public void CopyTo(Array a, int index)
        {
            m_oModuleObjectMemberList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oModuleObjectMemberList.GetEnumerator();
        }
        public void Add(ModuleObjectMember oObject)
        {
            m_oModuleObjectMemberList.Add(oObject);
        }
		public void RemoveAt(int index)
		{
			m_oModuleObjectMemberList.RemoveAt(index);
		}
		#endregion
		#region Region: Field Enumeration ///////////////////////////////////////////////////////////
		public enum ModuleObjectMemberFields 
		{
			ModuleObjectMemberID,
			ModuleObjectID,
			MemberCode,
			MemberName,
			MemberDescr,
			IndexOrder,
			IsWithApprovalProccess,
			ObjectCode,
			ObjectName
		}//End Enum
		#endregion
		#region Region: Sort Method///////////////////////////////////////////////////////////////////
		public void Sort (ModuleObjectMemberFields sortField, bool isAscending) 
		{
			switch (sortField) 
			{		
					
			case ModuleObjectMemberFields.ModuleObjectMemberID:
				this.Sort(new ModuleObjectMemberIDComparer());
				break;
		
			case ModuleObjectMemberFields.ModuleObjectID:
				this.Sort(new ModuleObjectIDComparer());
				break;
		
			case ModuleObjectMemberFields.MemberCode:
				this.Sort(new MemberCodeComparer());
				break;
		
			case ModuleObjectMemberFields.MemberName:
				this.Sort(new MemberNameComparer());
				break;
		
			case ModuleObjectMemberFields.MemberDescr:
				this.Sort(new MemberDescrComparer());
				break;
		
			case ModuleObjectMemberFields.IndexOrder:
				this.Sort(new IndexOrderComparer());
				break;
		
			case ModuleObjectMemberFields.IsWithApprovalProccess:
				this.Sort(new IsWithApprovalProccessComparer());
				break;
		
			case ModuleObjectMemberFields.ObjectCode:
				this.Sort(new ObjectCodeComparer());
				break;
		
			case ModuleObjectMemberFields.ObjectName:
				this.Sort(new ObjectNameComparer());
				break;
			}
			if(!isAscending) this.Reverse();
		}//End SortField
		#endregion
		#region Region: IComparer///////////////////////////////////////////////////////////////////

		private sealed class ModuleObjectMemberIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.ModuleObjectMemberID.CompareTo(second.ModuleObjectMemberID);
			}
		}	
		private sealed class ModuleObjectIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.ModuleObjectID.CompareTo(second.ModuleObjectID);
			}
		}	
		private sealed class MemberCodeComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.MemberCode.CompareTo(second.MemberCode);
			}
		}	
		private sealed class MemberNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.MemberName.CompareTo(second.MemberName);
			}
		}	
		private sealed class MemberDescrComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.MemberDescr.CompareTo(second.MemberDescr);
			}
		}	
		private sealed class IndexOrderComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.IndexOrder.CompareTo(second.IndexOrder);
			}
		}	
		private sealed class IsWithApprovalProccessComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.IsWithApprovalProccess.CompareTo(second.IsWithApprovalProccess);
			}
		}	
		private sealed class ObjectCodeComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.ObjectCode.CompareTo(second.ObjectCode);
			}
		}	
		private sealed class ObjectNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMember first = (ModuleObjectMember) x;
				ModuleObjectMember second = (ModuleObjectMember) y;
				return first.ObjectName.CompareTo(second.ObjectName);
			}
		}	
		#endregion
		#region Region: Data Access Layer ///////////////////////////////////////////////////////////////////
		public bool DAL_Load(
						string sKeyWords,
						object iModuleObjectID,
						object bIsWithApprovalProccess
						
						)
        {
            try
            {
				
				using(SqlDataReader drModuleObjectMember = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberList",
					sKeyWords ,
					iModuleObjectID,
					bIsWithApprovalProccess
					))
            	{
					if (drModuleObjectMember.HasRows)
                    {
						while (drModuleObjectMember.Read())
						{
							ModuleObjectMember oModuleObjectMember =  new ModuleObjectMember();		
							oModuleObjectMember.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMember.ModuleObjectID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMember.MemberCode = Convert.ToString(drModuleObjectMember["MEMBER_CODE"]);
							oModuleObjectMember.MemberName = Convert.ToString(drModuleObjectMember["MEMBER_NAME"]);
							oModuleObjectMember.MemberDescr = Convert.ToString(drModuleObjectMember["MEMBER_DESCR"]);
							oModuleObjectMember.IndexOrder = Convert.ToInt16(drModuleObjectMember["INDEX_ORDER"]);
							oModuleObjectMember.IsWithApprovalProccess = Convert.ToBoolean(drModuleObjectMember["IS_WITH_APPROVAL_PROCCESS"]);
							oModuleObjectMember.ObjectCode = Convert.ToString(drModuleObjectMember["OBJECT_CODE"]);
							oModuleObjectMember.ObjectName = Convert.ToString(drModuleObjectMember["OBJECT_NAME"]);
							this.Add(oModuleObjectMember);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }

		public bool DAL_LoadWithChild(
						string sKeyWords,
						object iModuleObjectID,
						object bIsWithApprovalProccess
						
						)
        {
            try
            {
				
				using(SqlDataReader drModuleObjectMember = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberList",
					sKeyWords ,
					iModuleObjectID,
					bIsWithApprovalProccess
					))
            	{
					if (drModuleObjectMember.HasRows)
                    {
						while (drModuleObjectMember.Read())
						{
							ModuleObjectMember oModuleObjectMember =  new ModuleObjectMember();		
							oModuleObjectMember.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMember.ModuleObjectID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMember.MemberCode = Convert.ToString(drModuleObjectMember["MEMBER_CODE"]);
							oModuleObjectMember.MemberName = Convert.ToString(drModuleObjectMember["MEMBER_NAME"]);
							oModuleObjectMember.MemberDescr = Convert.ToString(drModuleObjectMember["MEMBER_DESCR"]);
							oModuleObjectMember.IndexOrder = Convert.ToInt16(drModuleObjectMember["INDEX_ORDER"]);
							oModuleObjectMember.IsWithApprovalProccess = Convert.ToBoolean(drModuleObjectMember["IS_WITH_APPROVAL_PROCCESS"]);
							oModuleObjectMember.ObjectCode = Convert.ToString(drModuleObjectMember["OBJECT_CODE"]);
							oModuleObjectMember.ObjectName = Convert.ToString(drModuleObjectMember["OBJECT_NAME"]);
							
                            this.Add(oModuleObjectMember);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Load()
        {
            try
            {
				using(SqlDataReader drModuleObjectMember = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberList"))
            	{
					if (drModuleObjectMember.HasRows)
                    {
						while (drModuleObjectMember.Read())
						{
							ModuleObjectMember oModuleObjectMember =  new ModuleObjectMember();		
							oModuleObjectMember.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMember.ModuleObjectID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMember.MemberCode = Convert.ToString(drModuleObjectMember["MEMBER_CODE"]);
							oModuleObjectMember.MemberName = Convert.ToString(drModuleObjectMember["MEMBER_NAME"]);
							oModuleObjectMember.MemberDescr = Convert.ToString(drModuleObjectMember["MEMBER_DESCR"]);
							oModuleObjectMember.IndexOrder = Convert.ToInt16(drModuleObjectMember["INDEX_ORDER"]);
							oModuleObjectMember.IsWithApprovalProccess = Convert.ToBoolean(drModuleObjectMember["IS_WITH_APPROVAL_PROCCESS"]);
							oModuleObjectMember.ObjectCode = Convert.ToString(drModuleObjectMember["OBJECT_CODE"]);
							oModuleObjectMember.ObjectName = Convert.ToString(drModuleObjectMember["OBJECT_NAME"]);
							this.Add(oModuleObjectMember);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_LoadWithChild()
        {
            try
            {
				using(SqlDataReader drModuleObjectMember = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberList"))
            	{
					if (drModuleObjectMember.HasRows)
                    {
						while (drModuleObjectMember.Read())
						{
							ModuleObjectMember oModuleObjectMember =  new ModuleObjectMember();		
							oModuleObjectMember.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMember.ModuleObjectID = Convert.ToInt32(drModuleObjectMember["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMember.MemberCode = Convert.ToString(drModuleObjectMember["MEMBER_CODE"]);
							oModuleObjectMember.MemberName = Convert.ToString(drModuleObjectMember["MEMBER_NAME"]);
							oModuleObjectMember.MemberDescr = Convert.ToString(drModuleObjectMember["MEMBER_DESCR"]);
							oModuleObjectMember.IndexOrder = Convert.ToInt16(drModuleObjectMember["INDEX_ORDER"]);
							oModuleObjectMember.IsWithApprovalProccess = Convert.ToBoolean(drModuleObjectMember["IS_WITH_APPROVAL_PROCCESS"]);
							oModuleObjectMember.ObjectCode = Convert.ToString(drModuleObjectMember["OBJECT_CODE"]);
							oModuleObjectMember.ObjectName = Convert.ToString(drModuleObjectMember["OBJECT_NAME"]);
							
                            this.Add(oModuleObjectMember);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }		

		public bool DAL_LoadByModuleObjectID(Int64 iID)
        {
            try
            {
				return this.DAL_Load(
					null,
					iID,
					null
					);
            }
            catch (Exception ex)
            {
				throw ex;
            }
        }

		public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Update(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMember oModuleObjectMember in m_oModuleObjectMemberList)
				{
					bool bIsSuccess = oModuleObjectMember.DAL_Update(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}	
		
		public bool DAL_UpdateWithChild()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_UpdateWithChild(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_UpdateWithChild(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMember oModuleObjectMember in m_oModuleObjectMemberList)
				{
					bool bIsSuccess = oModuleObjectMember.DAL_UpdateWithChild(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}			
		
		public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMember oModuleObjectMember in m_oModuleObjectMemberList)
				{
					bool bIsSuccess = oModuleObjectMember.DAL_Add(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Delete(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMember oModuleObjectMember in m_oModuleObjectMemberList)
				{
					bool bIsSuccess = oModuleObjectMember.DAL_Delete(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}	
		#endregion
	} //** Class
} //** Name Space
