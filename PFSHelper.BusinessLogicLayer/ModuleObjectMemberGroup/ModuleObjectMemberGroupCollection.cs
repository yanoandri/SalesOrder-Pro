


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	[System.Xml.Serialization.XmlRoot("ModuleObjectMemberGroup")]
	public partial class ModuleObjectMemberGroupCollection  : ICollection
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
        private ArrayList m_oModuleObjectMemberGroupList = new ArrayList();
		private int m_iPageSize = 10;
		private int m_iPageNumber = 1;
		#endregion
		#region Region: Constructor///////////////////////////////////////////////////////////////////
		public ModuleObjectMemberGroupCollection()
		{
			m_iPageSize = 10;
			m_iPageNumber = 1;
		}
		#endregion
		#region Region: Properties///////////////////////////////////////////////////////////////////		
		public ModuleObjectMemberGroup this[int index]
        {
            get { return (ModuleObjectMemberGroup)m_oModuleObjectMemberGroupList[index]; }
        }
        public int Count
        {
            get { return m_oModuleObjectMemberGroupList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
		public int PageSize
        {
            get { return m_iPageSize; }
			set { m_iPageSize = value; }
        }
		public int PageNumber
        {
            get { return m_iPageNumber; }
			set { m_iPageNumber = value; }
        }
		#endregion
		#region Region: List Method///////////////////////////////////////////////////////////////////		
		public void Sort(IComparer oComparer)
		{
			m_oModuleObjectMemberGroupList.Sort(oComparer);
		}

		public void Reverse()
		{
			m_oModuleObjectMemberGroupList.Reverse();
		}

        public void CopyTo(Array a, int index)
        {
            m_oModuleObjectMemberGroupList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oModuleObjectMemberGroupList.GetEnumerator();
        }
        public void Add(ModuleObjectMemberGroup oObject)
        {
            m_oModuleObjectMemberGroupList.Add(oObject);
        }
		public void RemoveAt(int index)
		{
			m_oModuleObjectMemberGroupList.RemoveAt(index);
		}
		#endregion
		#region Region: Field Enumeration ///////////////////////////////////////////////////////////
		public enum ModuleObjectMemberGroupFields 
		{
			ModuleObjectMemberGroupID,
			ModuleID,
			ModuleObjectID,
			ModuleObjectMemberID,
			GroupID,
			ModuleCode,
			ModuleName,
			ObjectCode,
			ObjectName,
			MemberCode,
			MemberName,
			GroupName
		}//End Enum
		#endregion
		#region Region: Sort Method///////////////////////////////////////////////////////////////////
		public void Sort (ModuleObjectMemberGroupFields sortField, bool isAscending) 
		{
			switch (sortField) 
			{		
					
			case ModuleObjectMemberGroupFields.ModuleObjectMemberGroupID:
				this.Sort(new ModuleObjectMemberGroupIDComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ModuleID:
				this.Sort(new ModuleIDComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ModuleObjectID:
				this.Sort(new ModuleObjectIDComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ModuleObjectMemberID:
				this.Sort(new ModuleObjectMemberIDComparer());
				break;
		
			case ModuleObjectMemberGroupFields.GroupID:
				this.Sort(new GroupIDComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ModuleCode:
				this.Sort(new ModuleCodeComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ModuleName:
				this.Sort(new ModuleNameComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ObjectCode:
				this.Sort(new ObjectCodeComparer());
				break;
		
			case ModuleObjectMemberGroupFields.ObjectName:
				this.Sort(new ObjectNameComparer());
				break;
		
			case ModuleObjectMemberGroupFields.MemberCode:
				this.Sort(new MemberCodeComparer());
				break;
		
			case ModuleObjectMemberGroupFields.MemberName:
				this.Sort(new MemberNameComparer());
				break;
		
			case ModuleObjectMemberGroupFields.GroupName:
				this.Sort(new GroupNameComparer());
				break;
			}
			if(!isAscending) this.Reverse();
		}//End SortField
		#endregion
		#region Region: IComparer///////////////////////////////////////////////////////////////////

		private sealed class ModuleObjectMemberGroupIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleObjectMemberGroupID.CompareTo(second.ModuleObjectMemberGroupID);
			}
		}	
		private sealed class ModuleIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleID.CompareTo(second.ModuleID);
			}
		}	
		private sealed class ModuleObjectIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleObjectID.CompareTo(second.ModuleObjectID);
			}
		}	
		private sealed class ModuleObjectMemberIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleObjectMemberID.CompareTo(second.ModuleObjectMemberID);
			}
		}	
		private sealed class GroupIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.GroupID.CompareTo(second.GroupID);
			}
		}	
		private sealed class ModuleCodeComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleCode.CompareTo(second.ModuleCode);
			}
		}	
		private sealed class ModuleNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ModuleName.CompareTo(second.ModuleName);
			}
		}	
		private sealed class ObjectCodeComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ObjectCode.CompareTo(second.ObjectCode);
			}
		}	
		private sealed class ObjectNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.ObjectName.CompareTo(second.ObjectName);
			}
		}	
		private sealed class MemberCodeComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.MemberCode.CompareTo(second.MemberCode);
			}
		}	
		private sealed class MemberNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.MemberName.CompareTo(second.MemberName);
			}
		}	
		private sealed class GroupNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				ModuleObjectMemberGroup first = (ModuleObjectMemberGroup) x;
				ModuleObjectMemberGroup second = (ModuleObjectMemberGroup) y;
				return first.GroupName.CompareTo(second.GroupName);
			}
		}	
		#endregion
		#region Region: Data Access Layer ///////////////////////////////////////////////////////////////////
		public bool DAL_Load(
						string sKeyWords,
						object iModuleID,
						object iModuleObjectID,
						object iModuleObjectMemberID,
						object iGroupID
						
						)
        {
            try
            {
				
				using(SqlDataReader drModuleObjectMemberGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberGroupList",
					sKeyWords ,
					iModuleID,
					iModuleObjectID,
					iModuleObjectMemberID,
					iGroupID
					))
            	{
					if (drModuleObjectMemberGroup.HasRows)
                    {
						while (drModuleObjectMemberGroup.Read())
						{
							ModuleObjectMemberGroup oModuleObjectMemberGroup =  new ModuleObjectMemberGroup();		
							oModuleObjectMemberGroup.ModuleObjectMemberGroupID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_MEMBER_GROUP_ID"]);
							oModuleObjectMemberGroup.ModuleID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_ID"]);
							oModuleObjectMemberGroup.ModuleObjectID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMemberGroup.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMemberGroup.GroupID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_GROUP_ID"]);
							oModuleObjectMemberGroup.ModuleCode = Convert.ToString(drModuleObjectMemberGroup["MODULE_CODE"]);
							oModuleObjectMemberGroup.ModuleName = Convert.ToString(drModuleObjectMemberGroup["MODULE_NAME"]);
							oModuleObjectMemberGroup.ObjectCode = Convert.ToString(drModuleObjectMemberGroup["OBJECT_CODE"]);
							oModuleObjectMemberGroup.ObjectName = Convert.ToString(drModuleObjectMemberGroup["OBJECT_NAME"]);
							oModuleObjectMemberGroup.MemberCode = Convert.ToString(drModuleObjectMemberGroup["MEMBER_CODE"]);
							oModuleObjectMemberGroup.MemberName = Convert.ToString(drModuleObjectMemberGroup["MEMBER_NAME"]);
							oModuleObjectMemberGroup.GroupName = Convert.ToString(drModuleObjectMemberGroup["GROUP_NAME"]);
							this.Add(oModuleObjectMemberGroup);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }

		
		public bool DAL_Load()
        {
            try
            {
				using(SqlDataReader drModuleObjectMemberGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectMemberGroupList"))
            	{
					if (drModuleObjectMemberGroup.HasRows)
                    {
						while (drModuleObjectMemberGroup.Read())
						{
							ModuleObjectMemberGroup oModuleObjectMemberGroup =  new ModuleObjectMemberGroup();		
							oModuleObjectMemberGroup.ModuleObjectMemberGroupID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_MEMBER_GROUP_ID"]);
							oModuleObjectMemberGroup.ModuleID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_ID"]);
							oModuleObjectMemberGroup.ModuleObjectID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_ID"]);
							oModuleObjectMemberGroup.ModuleObjectMemberID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_MODULE_OBJECT_MEMBER_ID"]);
							oModuleObjectMemberGroup.GroupID = Convert.ToInt32(drModuleObjectMemberGroup["PFS_GROUP_ID"]);
							oModuleObjectMemberGroup.ModuleCode = Convert.ToString(drModuleObjectMemberGroup["MODULE_CODE"]);
							oModuleObjectMemberGroup.ModuleName = Convert.ToString(drModuleObjectMemberGroup["MODULE_NAME"]);
							oModuleObjectMemberGroup.ObjectCode = Convert.ToString(drModuleObjectMemberGroup["OBJECT_CODE"]);
							oModuleObjectMemberGroup.ObjectName = Convert.ToString(drModuleObjectMemberGroup["OBJECT_NAME"]);
							oModuleObjectMemberGroup.MemberCode = Convert.ToString(drModuleObjectMemberGroup["MEMBER_CODE"]);
							oModuleObjectMemberGroup.MemberName = Convert.ToString(drModuleObjectMemberGroup["MEMBER_NAME"]);
							oModuleObjectMemberGroup.GroupName = Convert.ToString(drModuleObjectMemberGroup["GROUP_NAME"]);
							this.Add(oModuleObjectMemberGroup);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		

		public bool DAL_LoadByModuleID(Int64 iID)
        {
            try
            {
				return this.DAL_Load(
					null,
					iID,
					null,
					null,
					null
					);
            }
            catch (Exception ex)
            {
				throw ex;
            }
        }
		public bool DAL_LoadByModuleObjectID(Int64 iID)
        {
            try
            {
				return this.DAL_Load(
					null,
					null,
					iID,
					null,
					null
					);
            }
            catch (Exception ex)
            {
				throw ex;
            }
        }
		public bool DAL_LoadByModuleObjectMemberID(Int64 iID)
        {
            try
            {
				return this.DAL_Load(
					null,
					null,
					null,
					iID,
					null
					);
            }
            catch (Exception ex)
            {
				throw ex;
            }
        }
		public bool DAL_LoadByGroupID(Int64 iID)
        {
            try
            {
				return this.DAL_Load(
					null,
					null,
					null,
					null,
					iID
					);
            }
            catch (Exception ex)
            {
				throw ex;
            }
        }

		public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Update(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMemberGroup oModuleObjectMemberGroup in m_oModuleObjectMemberGroupList)
				{
					bool bIsSuccess = oModuleObjectMemberGroup.DAL_Update(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberGroupList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}	
		
		
		public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMemberGroup oModuleObjectMemberGroup in m_oModuleObjectMemberGroupList)
				{
					bool bIsSuccess = oModuleObjectMemberGroup.DAL_Add(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberGroupList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Delete(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (ModuleObjectMemberGroup oModuleObjectMemberGroup in m_oModuleObjectMemberGroupList)
				{
					bool bIsSuccess = oModuleObjectMemberGroup.DAL_Delete(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oModuleObjectMemberGroupList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}	
		#endregion
	} //** Class
} //** Name Space
