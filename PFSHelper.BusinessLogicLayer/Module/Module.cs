


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2012, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	public partial class Module
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
        protected int m_iModuleID = 0;
		protected string m_sModuleCode = "NONE";
		protected string m_sModuleName = "NONE";
		protected string m_sModuleDescr = "NONE";
		protected int m_iIndexOrder = 0;
		#endregion
		
		#region Region: Constructor////////////////////////////////////////////////////////////////
		public Module()
		{
			m_iModuleID = -1;
		}	
		public Module(int iID)
		{
			m_iModuleID = iID;
		}

		public Module(
			int iModuleID,
			string sModuleCode,
			string sModuleName,
			string sModuleDescr,
			int iIndexOrder
			)
		{
			m_iModuleID = iModuleID;
			m_sModuleCode = sModuleCode;
			m_sModuleName = sModuleName;
			m_sModuleDescr = sModuleDescr;
			m_iIndexOrder = iIndexOrder;
		}

		#endregion
		
		#region Region: Properties/////////////////////////////////////////////////////////////////
		
		public int ModuleID
		{
			get {return m_iModuleID;}
			set {m_iModuleID = value;}
		}

		public string ModuleCode
		{
			get {return m_sModuleCode;}
			set {m_sModuleCode = value;}
		}

		public string ModuleName
		{
			get {return m_sModuleName;}
			set {m_sModuleName = value;}
		}

		public string ModuleDescr
		{
			get {return m_sModuleDescr;}
			set {m_sModuleDescr = value;}
		}

		public int IndexOrder
		{
			get {return m_iIndexOrder;}
			set {m_iIndexOrder = value;}
		}
		#endregion
		
		#region Region: Data Access Methods////////////////////////////////////////////////////////
		public bool DAL_Load()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModule = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleGet", m_iModuleID))
            	{
					if(drModule.Read())
            		{      
						m_iModuleID = Convert.ToInt32(drModule["PFS_MODULE_ID"]);
						m_sModuleCode = Convert.ToString(drModule["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModule["MODULE_NAME"]);
						m_sModuleDescr = Convert.ToString(drModule["MODULE_DESCR"]);
						m_iIndexOrder = Convert.ToInt32(drModule["INDEX_ORDER"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }	
		
		public bool DAL_Load(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModule = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleGet",iID))
            	{
					if(drModule.Read())
            		{      
						m_iModuleID = Convert.ToInt32(drModule["PFS_MODULE_ID"]);
						m_sModuleCode = Convert.ToString(drModule["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModule["MODULE_NAME"]);
						m_sModuleDescr = Convert.ToString(drModule["MODULE_DESCR"]);
						m_iIndexOrder = Convert.ToInt32(drModule["INDEX_ORDER"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Update() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_Update(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_Update(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iModuleID > 0)
				{
					int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ModuleUpdate",
					m_iModuleID,
										m_sModuleCode,
										m_sModuleName,
										m_sModuleDescr,
										m_iIndexOrder
					));
					bIsSuccess = (iError == 0);
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}			
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		
		public bool DAL_Delete() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans) 
        {
            try
            {
										
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_ModuleDelete", m_iModuleID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }	
        
		public bool DAL_Add() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iModuleID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ModuleAdd", 

					m_sModuleCode,
					m_sModuleName,
					m_sModuleDescr,
					m_iIndexOrder
					));
					
				bool bIsSuccess = (m_iModuleID >=0);
				
				
				return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		
		//*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
		#endregion
	} //** Class
} //** Name Space
