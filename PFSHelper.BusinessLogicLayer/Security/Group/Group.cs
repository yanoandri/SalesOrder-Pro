


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	public partial class Group
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
		protected UserGroupCollection m_oUserGroupCollection = null;
		protected int m_iGroupID = 0;
		protected string m_sGroupName = "NONE";
		protected string m_sGroupDescr = "NONE";
		protected bool m_bIsActive = false;
		protected bool m_bIsNeedApproval = false;
		protected DateTime m_dtCreateDate = DateTime.Parse("01/01/1900");
		protected int m_iCreateByUserID = 0;
		protected DateTime m_dtUpdateDate = DateTime.Parse("01/01/1900");
		protected int m_iUpdateByUserID = 0;
		#endregion
		
		#region Region: Constructor////////////////////////////////////////////////////////////////
		public Group()
		{
			m_iGroupID = -1;
			m_oUserGroupCollection = new UserGroupCollection();
            m_oGroupMemberCollection = new ModuleObjectMemberGroupCollection();
		}	
		public Group(int iID)
		{
			m_oUserGroupCollection = new UserGroupCollection();
			m_iGroupID = iID;
		}

		public Group(
			UserGroup oUserGroups,
			int iGroupID,
			string sGroupName,
			string sGroupDescr,
			bool bIsActive,
			bool bIsNeedApproval,
			DateTime dtCreateDate,
			int iCreateByUserID,
			DateTime dtUpdateDate,
			int iUpdateByUserID
			)
		{
			m_oUserGroupCollection = new UserGroupCollection();
			m_iGroupID = iGroupID;
			m_sGroupName = sGroupName;
			m_sGroupDescr = sGroupDescr;
			m_bIsActive = bIsActive;
			m_bIsNeedApproval = bIsNeedApproval;
			m_dtCreateDate = dtCreateDate;
			m_iCreateByUserID = iCreateByUserID;
			m_dtUpdateDate = dtUpdateDate;
			m_iUpdateByUserID = iUpdateByUserID;
		}

		#endregion
		
		#region Region: Properties/////////////////////////////////////////////////////////////////
		public UserGroupCollection UserGroups
		{
			get{ return m_oUserGroupCollection; }
			set{ m_oUserGroupCollection = value; }
		}
		
		public int GroupID
		{
			get {return m_iGroupID;}
			set {m_iGroupID = value;}
		}

		public string GroupName
		{
			get {return m_sGroupName;}
			set {m_sGroupName = value;}
		}

		public string GroupDescr
		{
			get {return m_sGroupDescr;}
			set {m_sGroupDescr = value;}
		}

		public bool IsActive
		{
			get {return m_bIsActive;}
			set {m_bIsActive = value;}
		}

		public bool IsNeedApproval
		{
			get {return m_bIsNeedApproval;}
			set {m_bIsNeedApproval = value;}
		}

		public DateTime CreateDate
		{
			get {return m_dtCreateDate;}
			set {m_dtCreateDate = value;}
		}

		public int CreateByUserID
		{
			get {return m_iCreateByUserID;}
			set {m_iCreateByUserID = value;}
		}

		public DateTime UpdateDate
		{
			get {return m_dtUpdateDate;}
			set {m_dtUpdateDate = value;}
		}

		public int UpdateByUserID
		{
			get {return m_iUpdateByUserID;}
			set {m_iUpdateByUserID = value;}
		}
		#endregion
		
		#region Region: Data Access Methods////////////////////////////////////////////////////////
		public bool DAL_Load()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupGet", m_iGroupID))
            	{
					if(drGroup.Read())
            		{      
						m_iGroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
						m_sGroupName = Convert.ToString(drGroup["GROUP_NAME"]);
						m_sGroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
						m_bIsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
						m_bIsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
						m_dtCreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
						m_iCreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
						m_dtUpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
						m_iUpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
                        m_sCreateByUsername = Convert.ToString(drGroup["CREATE_BY_USERNAME"]);
                        m_sUpdateByUsername = Convert.ToString(drGroup["UPDATE_BY_USERNAME"]);
                        m_iTotalUser = Convert.ToInt32(drGroup["TOTAL_USER"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }	
		public bool DAL_LoadWithChild()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupGet", m_iGroupID))
            	{
					if(drGroup.Read())
            		{      
						m_iGroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
						m_sGroupName = Convert.ToString(drGroup["GROUP_NAME"]);
						m_sGroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
						m_bIsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
						m_bIsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
						m_dtCreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
						m_iCreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
						m_dtUpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
						m_iUpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
						m_oUserGroupCollection.DAL_LoadByGroupID(m_iGroupID);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }		
		
		public bool DAL_Load(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupGet",iID))
            	{
					if(drGroup.Read())
            		{      
						m_iGroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
						m_sGroupName = Convert.ToString(drGroup["GROUP_NAME"]);
						m_sGroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
						m_bIsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
						m_bIsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
						m_dtCreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
						m_iCreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
						m_dtUpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
						m_iUpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		public bool DAL_LoadWithChild(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupGet",iID))
            	{
					if(drGroup.Read())
            		{      
						m_iGroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
						m_sGroupName = Convert.ToString(drGroup["GROUP_NAME"]);
						m_sGroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
						m_bIsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
						m_bIsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
						m_dtCreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
						m_iCreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
						m_dtUpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
						m_iUpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
						m_oUserGroupCollection.DAL_LoadByGroupID(m_iGroupID);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Update() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_Update(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_Update(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iGroupID > 0)
				{
					int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_GroupUpdate",
					m_iGroupID,
										m_sGroupName,
										m_sGroupDescr,
										m_bIsActive,
										m_bIsNeedApproval,
										m_dtCreateDate,
										m_iCreateByUserID,
										m_dtUpdateDate,
										m_iUpdateByUserID
					);
					bIsSuccess = (iRowAffected > 0);
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}			
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		public bool DAL_UpdateWithChild() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_UpdateWithChild(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_UpdateWithChild(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iGroupID > 0)
				{
					int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_GroupUpdate",
					m_iGroupID,
										m_sGroupName,
										m_sGroupDescr,
										m_bIsActive,
										m_bIsNeedApproval,
										m_dtCreateDate,
										m_iCreateByUserID,
										m_dtUpdateDate,
										m_iUpdateByUserID
					);
					bIsSuccess = (iRowAffected > 0);
					
					#region Delete appropriate child
					if (bIsSuccess)
					{
						//*** Retrieve the original list first
						UserGroupCollection oUserGroupDeletedList = new UserGroupCollection();			
						if (oUserGroupDeletedList.DAL_LoadByGroupID(m_iGroupID))
						{				
							//*** Then Compare to get deleted list
							foreach (UserGroup oUserGroupIterator in m_oUserGroupCollection)
							{
								//** Such a Hassle just to get a deleted list
								for (int i = 0; i < oUserGroupDeletedList.Count; i++)
								{
									if (oUserGroupDeletedList[i].UserGroupID == oUserGroupIterator.UserGroupID )
									{
										oUserGroupDeletedList.RemoveAt(i);
										break;
									}
								}
							}
							
							bIsSuccess = oUserGroupDeletedList.DAL_Delete(p_oTrans);
							if (!bIsSuccess) return bIsSuccess;
						}
					}								
					#endregion
					
					#region Update appropriate child
					if (bIsSuccess)
                    {
                        for (int i = 0; i < m_oUserGroupCollection.Count; i++)
                        {
                            m_oUserGroupCollection[i].GroupID = m_iGroupID;
                        }
                        bIsSuccess = m_oUserGroupCollection.DAL_Update(p_oTrans);
						if (!bIsSuccess) return bIsSuccess;
						
                    }
					#endregion
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}
							
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		public bool DAL_Delete() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans) 
        {
            try
            {
                #region Delete child first
				if (!m_oUserGroupCollection.DAL_Delete(p_oTrans)) return false;
				#endregion
										
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_GroupDelete", m_iGroupID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }	
        
		public bool DAL_Add() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iGroupID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_GroupAdd", 

					m_sGroupName,
					m_sGroupDescr,
					m_bIsActive,
					m_bIsNeedApproval,
					m_dtCreateDate,
					m_iCreateByUserID,
					m_dtUpdateDate,
					m_iUpdateByUserID
					));
					
				bool bIsSuccess = (m_iGroupID >=0);
				
				#region Add appropriate child
				if (bIsSuccess)
				{
					if (bIsSuccess)
					{
						for (int i = 0; i < m_oUserGroupCollection.Count; i++)
						{
							m_oUserGroupCollection[i].GroupID = m_iGroupID;
						}
						bIsSuccess = m_oUserGroupCollection.DAL_Add(p_oTrans);
					}
				}
				#endregion
				
				return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		
		//*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
		#endregion
	} //** Class
} //** Name Space
