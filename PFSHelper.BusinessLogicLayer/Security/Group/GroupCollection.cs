


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	[System.Xml.Serialization.XmlRoot("Group")]
	public partial class GroupCollection  : ICollection
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
        private ArrayList m_oGroupList = new ArrayList();
		private int m_iPageSize = 10;
		private int m_iPageNumber = 1;
		#endregion
		#region Region: Constructor///////////////////////////////////////////////////////////////////
		public GroupCollection()
		{
			m_iPageSize = 10;
			m_iPageNumber = 1;
		}
		#endregion
		#region Region: Properties///////////////////////////////////////////////////////////////////		
		public Group this[int index]
        {
            get { return (Group)m_oGroupList[index]; }
        }
        public int Count
        {
            get { return m_oGroupList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
		public int PageSize
        {
            get { return m_iPageSize; }
			set { m_iPageSize = value; }
        }
		public int PageNumber
        {
            get { return m_iPageNumber; }
			set { m_iPageNumber = value; }
        }
		#endregion
		#region Region: List Method///////////////////////////////////////////////////////////////////		
		public void Sort(IComparer oComparer)
		{
			m_oGroupList.Sort(oComparer);
		}

		public void Reverse()
		{
			m_oGroupList.Reverse();
		}

        public void CopyTo(Array a, int index)
        {
            m_oGroupList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oGroupList.GetEnumerator();
        }
        public void Add(Group oObject)
        {
            m_oGroupList.Add(oObject);
        }
		public void RemoveAt(int index)
		{
			m_oGroupList.RemoveAt(index);
		}
		#endregion
		#region Region: Field Enumeration ///////////////////////////////////////////////////////////
		public enum GroupFields 
		{
			GroupID,
			GroupName,
			GroupDescr,
			IsActive,
			IsNeedApproval,
			CreateDate,
			CreateByUserID,
			UpdateDate,
			UpdateByUserID
		}//End Enum
		#endregion
		#region Region: Sort Method///////////////////////////////////////////////////////////////////
		public void Sort (GroupFields sortField, bool isAscending) 
		{
			switch (sortField) 
			{		
					
			case GroupFields.GroupID:
				this.Sort(new GroupIDComparer());
				break;
		
			case GroupFields.GroupName:
				this.Sort(new GroupNameComparer());
				break;
		
			case GroupFields.GroupDescr:
				this.Sort(new GroupDescrComparer());
				break;
		
			case GroupFields.IsActive:
				this.Sort(new IsActiveComparer());
				break;
		
			case GroupFields.IsNeedApproval:
				this.Sort(new IsNeedApprovalComparer());
				break;
		
			case GroupFields.CreateDate:
				this.Sort(new CreateDateComparer());
				break;
		
			case GroupFields.CreateByUserID:
				this.Sort(new CreateByUserIDComparer());
				break;
		
			case GroupFields.UpdateDate:
				this.Sort(new UpdateDateComparer());
				break;
		
			case GroupFields.UpdateByUserID:
				this.Sort(new UpdateByUserIDComparer());
				break;
			}
			if(!isAscending) this.Reverse();
		}//End SortField
		#endregion
		#region Region: IComparer///////////////////////////////////////////////////////////////////

		private sealed class GroupIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.GroupID.CompareTo(second.GroupID);
			}
		}	
		private sealed class GroupNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.GroupName.CompareTo(second.GroupName);
			}
		}	
		private sealed class GroupDescrComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.GroupDescr.CompareTo(second.GroupDescr);
			}
		}	
		private sealed class IsActiveComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.IsActive.CompareTo(second.IsActive);
			}
		}	
		private sealed class IsNeedApprovalComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.IsNeedApproval.CompareTo(second.IsNeedApproval);
			}
		}	
		private sealed class CreateDateComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.CreateDate.CompareTo(second.CreateDate);
			}
		}	
		private sealed class CreateByUserIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.CreateByUserID.CompareTo(second.CreateByUserID);
			}
		}	
		private sealed class UpdateDateComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.UpdateDate.CompareTo(second.UpdateDate);
			}
		}	
		private sealed class UpdateByUserIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				Group first = (Group) x;
				Group second = (Group) y;
				return first.UpdateByUserID.CompareTo(second.UpdateByUserID);
			}
		}	
		#endregion
		#region Region: Data Access Layer ///////////////////////////////////////////////////////////////////
		public bool DAL_Load(
						string sKeyWords,
						object bIsActive,
						object bIsNeedApproval,
						object dtCreateDateFrom,
						object dtCreateDateTo,
						object iCreateByUserID,
						object dtUpdateDateFrom,
						object dtUpdateDateTo,
						object iUpdateByUserID
						
						)
        {
            try
            {
				
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupList",
					sKeyWords ,
					bIsActive,
					bIsNeedApproval,
					dtCreateDateFrom,
					dtCreateDateTo,
					iCreateByUserID,
					dtUpdateDateFrom,
					dtUpdateDateTo,
					iUpdateByUserID
					))
            	{
					if (drGroup.HasRows)
                    {
						while (drGroup.Read())
						{
							Group oGroup =  new Group();		
							oGroup.GroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
							oGroup.GroupName = Convert.ToString(drGroup["GROUP_NAME"]);
							oGroup.GroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
							oGroup.IsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
							oGroup.IsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
							oGroup.CreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
							oGroup.CreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
							oGroup.UpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
							oGroup.UpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
							this.Add(oGroup);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }

		public bool DAL_LoadWithChild(
						string sKeyWords,
						object bIsActive,
						object bIsNeedApproval,
						object dtCreateDateFrom,
						object dtCreateDateTo,
						object iCreateByUserID,
						object dtUpdateDateFrom,
						object dtUpdateDateTo,
						object iUpdateByUserID
						
						)
        {
            try
            {
				
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupList",
					sKeyWords ,
					bIsActive,
					bIsNeedApproval,
					dtCreateDateFrom,
					dtCreateDateTo,
					iCreateByUserID,
					dtUpdateDateFrom,
					dtUpdateDateTo,
					iUpdateByUserID
					))
            	{
					if (drGroup.HasRows)
                    {
						while (drGroup.Read())
						{
							Group oGroup =  new Group();		
							oGroup.GroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
							oGroup.GroupName = Convert.ToString(drGroup["GROUP_NAME"]);
							oGroup.GroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
							oGroup.IsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
							oGroup.IsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
							oGroup.CreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
							oGroup.CreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
							oGroup.UpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
							oGroup.UpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
                            //oUserGroups.DAL_LoadByGroupID(oGroup.GroupID);
							this.Add(oGroup);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Load()
        {
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupList",
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null))
            	{
					if (drGroup.HasRows)
                    {
						while (drGroup.Read())
						{
							Group oGroup =  new Group();		
							oGroup.GroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
							oGroup.GroupName = Convert.ToString(drGroup["GROUP_NAME"]);
							oGroup.GroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
							oGroup.IsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
							oGroup.IsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
							oGroup.CreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
							oGroup.CreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
							oGroup.UpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
							oGroup.UpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
							this.Add(oGroup);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_LoadWithChild()
        {
            try
            {
				using(SqlDataReader drGroup = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_GroupList"))
            	{
					if (drGroup.HasRows)
                    {
						while (drGroup.Read())
						{
							Group oGroup =  new Group();		
							oGroup.GroupID = Convert.ToInt32(drGroup["PFS_GROUP_ID"]);
							oGroup.GroupName = Convert.ToString(drGroup["GROUP_NAME"]);
							oGroup.GroupDescr = Convert.ToString(drGroup["GROUP_DESCR"]);
							oGroup.IsActive = Convert.ToBoolean(drGroup["IS_ACTIVE"]);
							oGroup.IsNeedApproval = Convert.ToBoolean(drGroup["IS_NEED_APPROVAL"]);
							oGroup.CreateDate = Convert.ToDateTime(drGroup["CREATE_DATE"]);
							oGroup.CreateByUserID = Convert.ToInt32(drGroup["CREATE_BY_USER_ID"]);
							oGroup.UpdateDate = Convert.ToDateTime(drGroup["UPDATE_DATE"]);
							oGroup.UpdateByUserID = Convert.ToInt32(drGroup["UPDATE_BY_USER_ID"]);
                            //oUserGroups.DAL_LoadByGroupID(oGroup.GroupID);
							this.Add(oGroup);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }		


		public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Update(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (Group oGroup in m_oGroupList)
				{
					bool bIsSuccess = oGroup.DAL_Update(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oGroupList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}	
		
		public bool DAL_UpdateWithChild()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_UpdateWithChild(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_UpdateWithChild(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (Group oGroup in m_oGroupList)
				{
					bool bIsSuccess = oGroup.DAL_UpdateWithChild(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oGroupList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}			
		
		public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (Group oGroup in m_oGroupList)
				{
					bool bIsSuccess = oGroup.DAL_Add(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oGroupList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Delete(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (Group oGroup in m_oGroupList)
				{
					bool bIsSuccess = oGroup.DAL_Delete(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oGroupList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}	
		#endregion
	} //** Class
} //** Name Space
