


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.0
    [System.Xml.Serialization.XmlRoot("User")]
    public partial class UserCollection : ICollection
    {
        #region Region: Member Variables///////////////////////////////////////////////////////////
        private ArrayList m_oUserList = new ArrayList();
        private int m_iPageSize = 10;
        private int m_iPageNumber = 1;
        #endregion
        #region Region: Constructor///////////////////////////////////////////////////////////////////
        public UserCollection()
        {
            m_iPageSize = 10;
            m_iPageNumber = 1;
        }
        #endregion
        #region Region: Properties///////////////////////////////////////////////////////////////////
        public User this[int index]
        {
            get { return (User)m_oUserList[index]; }
        }
        public int Count
        {
            get { return m_oUserList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
        public int PageSize
        {
            get { return m_iPageSize; }
            set { m_iPageSize = value; }
        }
        public int PageNumber
        {
            get { return m_iPageNumber; }
            set { m_iPageNumber = value; }
        }
        #endregion
        #region Region: List Method///////////////////////////////////////////////////////////////////
        public void Sort(IComparer oComparer)
        {
            m_oUserList.Sort(oComparer);
        }

        public void Reverse()
        {
            m_oUserList.Reverse();
        }

        public void CopyTo(Array a, int index)
        {
            m_oUserList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oUserList.GetEnumerator();
        }
        public void Add(User oObject)
        {
            m_oUserList.Add(oObject);
        }
        public void RemoveAt(int index)
        {
            m_oUserList.RemoveAt(index);
        }
        #endregion
        #region Region: Field Enumeration ///////////////////////////////////////////////////////////
        public enum UserFields
        {
            UserID,
            UserName,
            Password,
            FullName,
            Title,
            StartLoginTime,
            EndLoginTime,
            AllowHolidayLogin,
            AllowWeekendLogin,
            Email,
            IsActive,
            IsNeedApproval,
            LastAccess,
            IsLogin,
            CreateDate,
            CreateByUserID,
            UpdateDate,
            UpdateByUserID
        }//End Enum
        #endregion
        #region Region: Sort Method///////////////////////////////////////////////////////////////////
        public void Sort(UserFields sortField, bool isAscending)
        {
            switch (sortField)
            {

                case UserFields.UserID:
                    this.Sort(new UserIDComparer());
                    break;

                case UserFields.UserName:
                    this.Sort(new UserNameComparer());
                    break;

                case UserFields.Password:
                    this.Sort(new PasswordComparer());
                    break;

                case UserFields.FullName:
                    this.Sort(new FullNameComparer());
                    break;

                case UserFields.Title:
                    this.Sort(new TitleComparer());
                    break;

                case UserFields.Email:
                    this.Sort(new EmailComparer());
                    break;

                case UserFields.StartLoginTime:
                    this.Sort(new StartLoginTimeComparer());
                    break;

                case UserFields.EndLoginTime:
                    this.Sort(new EndLoginTimeComparer());
                    break;

                case UserFields.AllowHolidayLogin:
                    this.Sort(new AllowHolidayLoginComparer());
                    break;

                case UserFields.AllowWeekendLogin:
                    this.Sort(new AllowWeekendLoginComparer());
                    break;

                case UserFields.IsActive:
                    this.Sort(new IsActiveComparer());
                    break;

                case UserFields.IsNeedApproval:
                    this.Sort(new IsNeedApprovalComparer());
                    break;

                case UserFields.LastAccess:
                    this.Sort(new LastAccessComparer());
                    break;

                case UserFields.IsLogin:
                    this.Sort(new IsLoginComparer());
                    break;

                case UserFields.CreateDate:
                    this.Sort(new CreateDateComparer());
                    break;

                case UserFields.CreateByUserID:
                    this.Sort(new CreateByUserIDComparer());
                    break;

                case UserFields.UpdateDate:
                    this.Sort(new UpdateDateComparer());
                    break;

                case UserFields.UpdateByUserID:
                    this.Sort(new UpdateByUserIDComparer());
                    break;
            }
            if (!isAscending) this.Reverse();
        }//End SortField
        #endregion
        #region Region: IComparer///////////////////////////////////////////////////////////////////

        private sealed class UserIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.UserID.CompareTo(second.UserID);
            }
        }
        private sealed class UserNameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.UserName.CompareTo(second.UserName);
            }
        }
        private sealed class PasswordComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.Password.CompareTo(second.Password);
            }
        }
        private sealed class FullNameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.FullName.CompareTo(second.FullName);
            }
        }
        private sealed class TitleComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.Title.CompareTo(second.Title);
            }
        }
        private sealed class EmailComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.Email.CompareTo(second.Email);
            }
        }
        private sealed class StartLoginTimeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.StartLoginTime.CompareTo(second.StartLoginTime);
            }
        }
        private sealed class EndLoginTimeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.EndLoginTime.CompareTo(second.EndLoginTime);
            }
        }
        private sealed class AllowHolidayLoginComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.AllowHolidayLogin.CompareTo(second.AllowHolidayLogin);
            }
        }
        private sealed class AllowWeekendLoginComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.AllowWeekendLogin.CompareTo(second.AllowWeekendLogin);
            }
        }
        private sealed class IsActiveComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.IsActive.CompareTo(second.IsActive);
            }
        }
        private sealed class IsNeedApprovalComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.IsNeedApproval.CompareTo(second.IsNeedApproval);
            }
        }
        private sealed class LastAccessComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.LastAccess.CompareTo(second.LastAccess);
            }
        }
        private sealed class IsLoginComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.IsLogin.CompareTo(second.IsLogin);
            }
        }
        private sealed class CreateDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.CreateDate.CompareTo(second.CreateDate);
            }
        }
        private sealed class CreateByUserIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.CreateByUserID.CompareTo(second.CreateByUserID);
            }
        }
        private sealed class UpdateDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.UpdateDate.CompareTo(second.UpdateDate);
            }
        }
        private sealed class UpdateByUserIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                User first = (User)x;
                User second = (User)y;
                return first.UpdateByUserID.CompareTo(second.UpdateByUserID);
            }
        }
        #endregion
        #region Region: Data Access Layer ///////////////////////////////////////////////////////////////////
        public bool DAL_Load(
                        string sKeyWords,
                        object bIsActive,
                        object bIsNeedApproval,
                        object dtLastAccessFrom,
                        object dtLastAccessTo,
                        object bIsLogin,
                        object dtCreateDateFrom,
                        object dtCreateDateTo,
                        object iCreateByUserID,
                        object dtUpdateDateFrom,
                        object dtUpdateDateTo,
                        object iUpdateByUserID,
                        object bAllowHolidayLogin,
                        object bAllowWeekendLogin

                        )
        {
            try
            {

                using (SqlDataReader drUser = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserList",
                    sKeyWords,
                    bAllowHolidayLogin,
                    bAllowWeekendLogin,
                    bIsActive,
                    bIsNeedApproval,
                    dtLastAccessFrom,
                    dtLastAccessTo,
                    bIsLogin,
                    dtCreateDateFrom,
                    dtCreateDateTo,
                    iCreateByUserID,
                    dtUpdateDateFrom,
                    dtUpdateDateTo,
                    iUpdateByUserID
                    ))
                {
                    if (drUser.HasRows)
                    {
                        while (drUser.Read())
                        {
                            User oUser = new User();
                            oUser.UserID = Convert.ToInt32(drUser["PFS_USER_ID"]);
                            oUser.UserName = Convert.ToString(drUser["USER_NAME"]);
                            oUser.Password = Convert.ToString(drUser["PASSWORD"]);
                            oUser.FullName = Convert.ToString(drUser["FULL_NAME"]);
                            oUser.Title = Convert.ToString(drUser["TITLE"]);
                            oUser.Email = Convert.ToString(drUser["EMAIL"]);
                            oUser.StartLoginTime = Convert.ToString(drUser["START_LOGIN_TIME"]);
                            oUser.EndLoginTime = Convert.ToString(drUser["END_LOGIN_TIME"]);
                            oUser.AllowHolidayLogin = Convert.ToBoolean(drUser["ALLOW_HOLIDAY_LOGIN"]);
                            oUser.AllowWeekendLogin = Convert.ToBoolean(drUser["ALLOW_WEEKEND_LOGIN"]);
                            oUser.IsActive = Convert.ToBoolean(drUser["IS_ACTIVE"]);
                            oUser.IsNeedApproval = Convert.ToBoolean(drUser["IS_NEED_APPROVAL"]);
                            oUser.LastAccess = Convert.ToDateTime(drUser["LAST_ACCESS"]);
                            oUser.IsLogin = Convert.ToBoolean(drUser["IS_LOGIN"]);
                            oUser.CreateDate = Convert.ToDateTime(drUser["CREATE_DATE"]);
                            oUser.CreateByUserID = Convert.ToInt32(drUser["CREATE_BY_USER_ID"]);
                            oUser.UpdateDate = Convert.ToDateTime(drUser["UPDATE_DATE"]);
                            oUser.UpdateByUserID = Convert.ToInt32(drUser["UPDATE_BY_USER_ID"]);
                            this.Add(oUser);
                        }
                        return true;
                    } //*** if (dr.HasRows)
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public bool DAL_Load()
        {
            try
            {
                using (SqlDataReader drUser = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserList"))
                {
                    if (drUser.HasRows)
                    {
                        while (drUser.Read())
                        {
                            User oUser = new User();
                            oUser.UserID = Convert.ToInt32(drUser["PFS_USER_ID"]);
                            oUser.UserName = Convert.ToString(drUser["USER_NAME"]);
                            oUser.Password = Convert.ToString(drUser["PASSWORD"]);
                            oUser.FullName = Convert.ToString(drUser["FULL_NAME"]);
                            oUser.Title = Convert.ToString(drUser["TITLE"]);
                            oUser.Email = Convert.ToString(drUser["EMAIL"]);
                            oUser.StartLoginTime = Convert.ToString(drUser["START_LOGIN_TIME"]);
                            oUser.EndLoginTime = Convert.ToString(drUser["END_LOGIN_TIME"]);
                            oUser.AllowHolidayLogin = Convert.ToBoolean(drUser["ALLOW_HOLIDAY_LOGIN"]);
                            oUser.AllowWeekendLogin = Convert.ToBoolean(drUser["ALLOW_WEEKEND_LOGIN"]);
                            oUser.IsActive = Convert.ToBoolean(drUser["IS_ACTIVE"]);
                            oUser.IsNeedApproval = Convert.ToBoolean(drUser["IS_NEED_APPROVAL"]);
                            oUser.LastAccess = Convert.ToDateTime(drUser["LAST_ACCESS"]);
                            oUser.IsLogin = Convert.ToBoolean(drUser["IS_LOGIN"]);
                            oUser.CreateDate = Convert.ToDateTime(drUser["CREATE_DATE"]);
                            oUser.CreateByUserID = Convert.ToInt32(drUser["CREATE_BY_USER_ID"]);
                            oUser.UpdateDate = Convert.ToDateTime(drUser["UPDATE_DATE"]);
                            oUser.UpdateByUserID = Convert.ToInt32(drUser["UPDATE_BY_USER_ID"]);
                            this.Add(oUser);
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_LoadWithChild(
                        string sKeyWords,
                        object bIsActive,
                        object bIsNeedApproval,
                        object dtLastAccessFrom,
                        object dtLastAccessTo,
                        object bIsLogin,
                        object dtCreateDateFrom,
                        object dtCreateDateTo,
                        object iCreateByUserID,
                        object dtUpdateDateFrom,
                        object dtUpdateDateTo,
                        object iUpdateByUserID,
                        object bAllowHolidayLogin,
                        object bAllowWeekendLogin

                        )
        {
            try
            {

                using (SqlDataReader drUser = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserList",
                    sKeyWords,
                    bAllowHolidayLogin,
                    bAllowWeekendLogin,
                    bIsActive,
                    bIsNeedApproval,
                    dtLastAccessFrom,
                    dtLastAccessTo,
                    bIsLogin,
                    dtCreateDateFrom,
                    dtCreateDateTo,
                    iCreateByUserID,
                    dtUpdateDateFrom,
                    dtUpdateDateTo,
                    iUpdateByUserID
                    ))
                {
                    if (drUser.HasRows)
                    {
                        while (drUser.Read())
                        {
                            User oUser = new User();
                            oUser.UserID = Convert.ToInt32(drUser["PFS_USER_ID"]);
                            oUser.UserName = Convert.ToString(drUser["USER_NAME"]);
                            oUser.Password = Convert.ToString(drUser["PASSWORD"]);
                            oUser.FullName = Convert.ToString(drUser["FULL_NAME"]);
                            oUser.Title = Convert.ToString(drUser["TITLE"]);
                            oUser.Email = Convert.ToString(drUser["EMAIL"]);
                            oUser.StartLoginTime = Convert.ToString(drUser["START_LOGIN_TIME"]);
                            oUser.EndLoginTime = Convert.ToString(drUser["END_LOGIN_TIME"]);
                            oUser.AllowHolidayLogin = Convert.ToBoolean(drUser["ALLOW_HOLIDAY_LOGIN"]);
                            oUser.AllowWeekendLogin = Convert.ToBoolean(drUser["ALLOW_WEEKEND_LOGIN"]);
                            oUser.IsActive = Convert.ToBoolean(drUser["IS_ACTIVE"]);
                            oUser.IsNeedApproval = Convert.ToBoolean(drUser["IS_NEED_APPROVAL"]);
                            oUser.LastAccess = Convert.ToDateTime(drUser["LAST_ACCESS"]);
                            oUser.IsLogin = Convert.ToBoolean(drUser["IS_LOGIN"]);
                            oUser.CreateDate = Convert.ToDateTime(drUser["CREATE_DATE"]);
                            oUser.CreateByUserID = Convert.ToInt32(drUser["CREATE_BY_USER_ID"]);
                            oUser.UpdateDate = Convert.ToDateTime(drUser["UPDATE_DATE"]);
                            oUser.UpdateByUserID = Convert.ToInt32(drUser["UPDATE_BY_USER_ID"]);
                            oUser.UserDetails.DAL_LoadByUserID(oUser.UserID);
                            this.Add(oUser);
                        }
                        return true;
                    } //*** if (dr.HasRows)
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_LoadWithChild()
        {
            try
            {
                using (SqlDataReader drUser = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserList"))
                {
                    if (drUser.HasRows)
                    {
                        while (drUser.Read())
                        {
                            User oUser = new User();
                            oUser.UserID = Convert.ToInt32(drUser["PFS_USER_ID"]);
                            oUser.UserName = Convert.ToString(drUser["USER_NAME"]);
                            oUser.Password = Convert.ToString(drUser["PASSWORD"]);
                            oUser.FullName = Convert.ToString(drUser["FULL_NAME"]);
                            oUser.Title = Convert.ToString(drUser["TITLE"]);
                            oUser.Email = Convert.ToString(drUser["EMAIL"]);
                            oUser.StartLoginTime = Convert.ToString(drUser["START_LOGIN_TIME"]);
                            oUser.EndLoginTime = Convert.ToString(drUser["END_LOGIN_TIME"]);
                            oUser.AllowHolidayLogin = Convert.ToBoolean(drUser["ALLOW_HOLIDAY_LOGIN"]);
                            oUser.AllowWeekendLogin = Convert.ToBoolean(drUser["ALLOW_WEEKEND_LOGIN"]);
                            oUser.IsActive = Convert.ToBoolean(drUser["IS_ACTIVE"]);
                            oUser.IsNeedApproval = Convert.ToBoolean(drUser["IS_NEED_APPROVAL"]);
                            oUser.LastAccess = Convert.ToDateTime(drUser["LAST_ACCESS"]);
                            oUser.IsLogin = Convert.ToBoolean(drUser["IS_LOGIN"]);
                            oUser.CreateDate = Convert.ToDateTime(drUser["CREATE_DATE"]);
                            oUser.CreateByUserID = Convert.ToInt32(drUser["CREATE_BY_USER_ID"]);
                            oUser.UpdateDate = Convert.ToDateTime(drUser["UPDATE_DATE"]);
                            oUser.UpdateByUserID = Convert.ToInt32(drUser["UPDATE_BY_USER_ID"]);
                            oUser.UserDetails.DAL_LoadByUserID(oUser.UserID);
                            this.Add(oUser);
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (User oUser in m_oUserList)
                {
                    bool bIsSuccess = oUser.DAL_Update(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oUserList.Count)
                    return false;
                else
                    return true;
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_UpdateWithChild()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_UpdateWithChild(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_UpdateWithChild(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (User oUser in m_oUserList)
                {
                    bool bIsSuccess = oUser.DAL_UpdateWithChild(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oUserList.Count)
                    return false;
                else
                    return true;
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (User oUser in m_oUserList)
                {
                    bool bIsSuccess = oUser.DAL_Add(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oUserList.Count)
                    return false;
                else
                    return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (User oUser in m_oUserList)
                {
                    bool bIsSuccess = oUser.DAL_Delete(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oUserList.Count)
                    return false;
                else
                    return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    } //** Class
} //** Name Space
