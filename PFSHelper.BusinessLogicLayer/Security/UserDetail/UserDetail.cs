using System;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;
using System.Data.SqlTypes;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2015, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.1
    public partial class UserDetail
    {
        #region Region: Member Variables///////////////////////////////////////////////////////
        protected int m_iUserDetailID = 0;
        protected int m_iUserID = 0;
        protected string m_sUserCode = "NONE";
        protected string m_sBranchCode = "NONE";
        protected string m_sDepartmentName = "NONE";
        protected string m_sPosition = "NONE";
        protected DateTime m_dtDob = DateTime.Parse("01/01/1900");
        protected string m_sHomeNumber = "NONE";
        protected string m_sWorkNumber = "NONE";
        protected string m_sMobileNumber = "NONE";
        protected SqlBinary m_byPicture = null;
        protected string m_sUserName = "NONE";
        protected string m_sFullName = "NONE";
        #endregion

        #region Region: Constructor////////////////////////////////////////////////////////////
        public UserDetail()
        {
            m_iUserDetailID = -1;
        }
        public UserDetail(int iID)
        {
            m_iUserDetailID = iID;
        }
        public UserDetail(
            int iUserDetailID,
            int iUserID,
            string sUserCode,
            string sBranchCode,
            string sDepartmentName,
            string sPosition,
            DateTime dtDob,
            string sHomeNumber,
            string sWorkNumber,
            string sMobileNumber,
            SqlBinary byPicture
        )
        {
            m_iUserDetailID = iUserDetailID;
            m_iUserID = iUserID;
            m_sUserCode = sUserCode;
            m_sBranchCode = sBranchCode;
            m_sDepartmentName = sDepartmentName;
            m_sPosition = sPosition;
            m_dtDob = dtDob;
            m_sHomeNumber = sHomeNumber;
            m_sWorkNumber = sWorkNumber;
            m_sMobileNumber = sMobileNumber;
            m_byPicture = byPicture;
        }
        #endregion

        #region Region: Properties/////////////////////////////////////////////////////////////
        public int UserDetailID
        {
            get { return m_iUserDetailID; }
            set { m_iUserDetailID = value; }
        }
        public int UserID
        {
            get { return m_iUserID; }
            set { m_iUserID = value; }
        }
        public string UserCode
        {
            get { return m_sUserCode; }
            set { m_sUserCode = value; }
        }
        public string BranchCode
        {
            get { return m_sBranchCode; }
            set { m_sBranchCode = value; }
        }
        public string DepartmentName
        {
            get { return m_sDepartmentName; }
            set { m_sDepartmentName = value; }
        }
        public string Position
        {
            get { return m_sPosition; }
            set { m_sPosition = value; }
        }
        public DateTime Dob
        {
            get { return m_dtDob; }
            set { m_dtDob = value; }
        }
        public string HomeNumber
        {
            get { return m_sHomeNumber; }
            set { m_sHomeNumber = value; }
        }
        public string WorkNumber
        {
            get { return m_sWorkNumber; }
            set { m_sWorkNumber = value; }
        }
        public string MobileNumber
        {
            get { return m_sMobileNumber; }
            set { m_sMobileNumber = value; }
        }
        public SqlBinary Picture
        {
            get { return m_byPicture; }
            set { m_byPicture = value; }
        }
        public string UserName
        {
            get { return m_sUserName; }
            set { m_sUserName = value; }
        }
        public string FullName
        {
            get { return m_sFullName; }
            set { m_sFullName = value; }
        }
        #endregion

        #region Region: Data Access Methods////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserDetailGet", m_iUserDetailID))
                {
                    if (dr.Read())
                    {
                        m_iUserDetailID = Convert.ToInt32(dr["PFS_USER_DETAIL_ID"]);
                        m_iUserID = Convert.ToInt32(dr["PFS_USER_ID"]);
                        m_sUserCode = Convert.ToString(dr["USER_CODE"]);
                        m_sBranchCode = Convert.ToString(dr["BRANCH_CODE"]);
                        m_sDepartmentName = Convert.ToString(dr["DEPARTMENT_NAME"]);
                        m_sPosition = Convert.ToString(dr["POSITION"]);
                        m_dtDob = Convert.ToDateTime(dr["DOB"]);
                        m_sHomeNumber = Convert.ToString(dr["HOME_NUMBER"]);
                        m_sWorkNumber = Convert.ToString(dr["WORK_NUMBER"]);
                        m_sMobileNumber = Convert.ToString(dr["MOBILE_NUMBER"]);
                        m_byPicture = (SqlBinary)(dr["PICTURE"]);
                        m_sUserName = Convert.ToString(dr["USER_NAME"]);
                        m_sFullName = Convert.ToString(dr["FULL_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Load(int iID)
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserDetailGet", iID))
                {
                    if (dr.Read())
                    {
                        m_iUserDetailID = Convert.ToInt32(dr["PFS_USER_DETAIL_ID"]);
                        m_iUserID = Convert.ToInt32(dr["PFS_USER_ID"]);
                        m_sUserCode = Convert.ToString(dr["USER_CODE"]);
                        m_sBranchCode = Convert.ToString(dr["BRANCH_CODE"]);
                        m_sDepartmentName = Convert.ToString(dr["DEPARTMENT_NAME"]);
                        m_sPosition = Convert.ToString(dr["POSITION"]);
                        m_dtDob = Convert.ToDateTime(dr["DOB"]);
                        m_sHomeNumber = Convert.ToString(dr["HOME_NUMBER"]);
                        m_sWorkNumber = Convert.ToString(dr["WORK_NUMBER"]);
                        m_sMobileNumber = Convert.ToString(dr["MOBILE_NUMBER"]);
                        m_byPicture = (SqlBinary)(dr["PICTURE"]);
                        m_sUserName = Convert.ToString(dr["USER_NAME"]);
                        m_sFullName = Convert.ToString(dr["FULL_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Add(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iUserDetailID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserDetailAdd",

                    m_iUserID,
                    m_sUserCode,
                    m_sBranchCode,
                    m_sDepartmentName,
                    m_sPosition,
                    m_dtDob,
                    m_sHomeNumber,
                    m_sWorkNumber,
                    m_sMobileNumber,
                    m_byPicture
                ));
                if (m_iUserDetailID < 1) return false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Update(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                if (m_iUserDetailID > 0)
                {
                    int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserDetailUpdate",
                        m_iUserDetailID,
                        m_iUserID,
                        m_sUserCode,
                        m_sBranchCode,
                        m_sDepartmentName,
                        m_sPosition,
                        m_dtDob,
                        m_sHomeNumber,
                        m_sWorkNumber,
                        m_sMobileNumber,
                        m_byPicture
                    ));
                    if (iError != 0) return false;
                }
                else return DAL_Add(p_oTrans);

                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Delete(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_UserDetailDelete", m_iUserDetailID);
                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}