
using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Revision History 

// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.0
    [System.Xml.Serialization.XmlRoot("ExceptionLog")]
    public partial class ExceptionLogCollection : ICollection
    {
        #region Member Variables 

        private ArrayList m_oExceptionLogList = new ArrayList();
        private int m_iPageSize = 10;
        private int m_iPageNumber = 1;
        #endregion

        #region Constructor 

        public ExceptionLogCollection()
        {
            m_iPageSize = 10;
            m_iPageNumber = 1;
        }
        #endregion

        #region Properties 

        public ExceptionLog this[int index]
        {
            get { return (ExceptionLog)m_oExceptionLogList[index]; }
        }

        public int Count
        {
            get { return m_oExceptionLogList.Count; }
        }

        public object SyncRoot
        {
            get { return this; }
        }

        public bool IsSynchronized
        {
            get { return false; }
        }

        public int PageSize
        {
            get { return m_iPageSize; }
            set { m_iPageSize = value; }
        }

        public int PageNumber
        {
            get { return m_iPageNumber; }
            set { m_iPageNumber = value; }
        }
        #endregion

        #region List Method 

        public void Sort(IComparer oComparer)
        {
            m_oExceptionLogList.Sort(oComparer);
        }

        public void Reverse()
        {
            m_oExceptionLogList.Reverse();
        }

        public void CopyTo(Array a, int index)
        {
            m_oExceptionLogList.CopyTo(a, index);
        }

        public IEnumerator GetEnumerator()
        {
            return m_oExceptionLogList.GetEnumerator();
        }

        public void Add(ExceptionLog oObject)
        {
            m_oExceptionLogList.Add(oObject);
        }

        public void RemoveAt(int index)
        {
            m_oExceptionLogList.RemoveAt(index);
        }

        #endregion

        #region Field Enumeration 

        public enum ExceptionLogFields
        {
            ExceptionLogID,
            ReferenceNumber,
            LogDate,
            Source,
            Description
        }
        #endregion

        #region Sort Method 

        public void Sort(ExceptionLogFields sortField, bool isAscending)
        {
            switch (sortField)
            {

                case ExceptionLogFields.ExceptionLogID:
                    this.Sort(new ExceptionLogIDComparer());
                    break;

                case ExceptionLogFields.ReferenceNumber:
                    this.Sort(new ReferenceNumberComparer());
                    break;

                case ExceptionLogFields.LogDate:
                    this.Sort(new LogDateComparer());
                    break;

                case ExceptionLogFields.Source:
                    this.Sort(new SourceComparer());
                    break;

                case ExceptionLogFields.Description:
                    this.Sort(new DescriptionComparer());
                    break;
            }
            if (!isAscending) this.Reverse();
        }//End SortField
        #endregion

        #region IComparer 

        private sealed class ExceptionLogIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ExceptionLog first = (ExceptionLog)x;
                ExceptionLog second = (ExceptionLog)y;
                return first.ExceptionLogID.CompareTo(second.ExceptionLogID);
            }
        }
        private sealed class ReferenceNumberComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ExceptionLog first = (ExceptionLog)x;
                ExceptionLog second = (ExceptionLog)y;
                return first.ReferenceNumber.CompareTo(second.ReferenceNumber);
            }
        }
        private sealed class LogDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ExceptionLog first = (ExceptionLog)x;
                ExceptionLog second = (ExceptionLog)y;
                return first.LogDate.CompareTo(second.LogDate);
            }
        }
        private sealed class SourceComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ExceptionLog first = (ExceptionLog)x;
                ExceptionLog second = (ExceptionLog)y;
                return first.Source.CompareTo(second.Source);
            }
        }
        private sealed class DescriptionComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ExceptionLog first = (ExceptionLog)x;
                ExceptionLog second = (ExceptionLog)y;
                return first.Description.CompareTo(second.Description);
            }
        }
        #endregion

        #region Data Access Layer 

        public bool DAL_Load(
            string sKeyWords,
            object dtLogDateFrom,
            object dtLogDateTo
            )
        {
            try
            {

                using (SqlDataReader drExceptionLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ExceptionLogList",
                    sKeyWords,
                    dtLogDateFrom,
                    dtLogDateTo
                    ))
                {
                    if (drExceptionLog.HasRows)
                    {
                        while (drExceptionLog.Read())
                        {
                            ExceptionLog oExceptionLog = new ExceptionLog();

                            oExceptionLog.ExceptionLogID = Convert.ToInt64(drExceptionLog["PFS_EXCEPTION_LOG_ID"]);
                            oExceptionLog.ReferenceNumber = Convert.ToString(drExceptionLog["REFERENCE_NUMBER"]);
                            oExceptionLog.LogDate = Convert.ToDateTime(drExceptionLog["LOG_DATE"]);
                            oExceptionLog.Source = Convert.ToString(drExceptionLog["SOURCE"]);
                            oExceptionLog.Description = Convert.ToString(drExceptionLog["DESCRIPTION"]);
                            
                            this.Add(oExceptionLog);
                        }
                        return true;
                    } 
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Load()
        {
            try
            {
                using (SqlDataReader drExceptionLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ExceptionLogList"))
                {
                    if (drExceptionLog.HasRows)
                    {
                        while (drExceptionLog.Read())
                        {
                            ExceptionLog oExceptionLog = new ExceptionLog();
                            oExceptionLog.ExceptionLogID = Convert.ToInt64(drExceptionLog["PFS_EXCEPTION_LOG_ID"]);
                            oExceptionLog.ReferenceNumber = Convert.ToString(drExceptionLog["REFERENCE_NUMBER"]);
                            oExceptionLog.LogDate = Convert.ToDateTime(drExceptionLog["LOG_DATE"]);
                            oExceptionLog.Source = Convert.ToString(drExceptionLog["SOURCE"]);
                            oExceptionLog.Description = Convert.ToString(drExceptionLog["DESCRIPTION"]);
                            this.Add(oExceptionLog);
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (ExceptionLog oExceptionLog in m_oExceptionLogList)
                {
                    bool bIsSuccess = oExceptionLog.DAL_Update(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oExceptionLogList.Count)
                    return false;
                else
                    return true;
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (ExceptionLog oExceptionLog in m_oExceptionLogList)
                {
                    bool bIsSuccess = oExceptionLog.DAL_Add(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oExceptionLogList.Count)
                    return false;
                else
                    return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                int iSuccessCounter = 0;
                foreach (ExceptionLog oExceptionLog in m_oExceptionLogList)
                {
                    bool bIsSuccess = oExceptionLog.DAL_Delete(p_oTrans);
                    if (!bIsSuccess) break;
                    iSuccessCounter++;
                }
                if (iSuccessCounter < m_oExceptionLogList.Count)
                    return false;
                else
                    return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    } 
} 
