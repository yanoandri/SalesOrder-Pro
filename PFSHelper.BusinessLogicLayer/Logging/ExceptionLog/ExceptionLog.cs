
using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Revision History 

// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.0
    public partial class ExceptionLog
    {
        #region Member Variables 

        protected long m_lExceptionLogID = 0;
        protected string m_sReferenceNumber = "NONE";
        protected DateTime m_dtLogDate = DateTime.Now;
        protected string m_sSource = "NONE";
        protected string m_sDescription = "NONE";
        #endregion

        #region Constructor 

        public ExceptionLog()
        {
            m_lExceptionLogID = -1;
        }

        public ExceptionLog(long iID)
        {
            m_lExceptionLogID = iID;
        }

        public ExceptionLog(
            long lExceptionLogID,
            string sReferenceNumber,
            DateTime dtLogDate,
            string sSource,
            string sDescription
            )
        {
            m_lExceptionLogID = lExceptionLogID;
            m_sReferenceNumber = sReferenceNumber;
            m_dtLogDate = dtLogDate;
            m_sSource = sSource;
            m_sDescription = sDescription;
        }

        #endregion

        #region Properties 

        public long ExceptionLogID
        {
            get { return m_lExceptionLogID; }
            set { m_lExceptionLogID = value; }
        }

        public string ReferenceNumber
        {
            get { return m_sReferenceNumber; }
            set { m_sReferenceNumber = value; }
        }

        public DateTime LogDate
        {
            get { return m_dtLogDate; }
            set { m_dtLogDate = value; }
        }

        public string Source
        {
            get { return m_sSource; }
            set { m_sSource = value; }
        }

        public string Description
        {
            get { return m_sDescription; }
            set { m_sDescription = value; }
        }
        #endregion

        #region Data Access Methods 

        public bool DAL_Load()
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader drExceptionLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "spPFS_ExceptionLogGet", m_lExceptionLogID))
                {
                    if (drExceptionLog.Read())
                    {
                        m_lExceptionLogID = Convert.ToInt64(drExceptionLog["PFS_EXCEPTION_LOG_ID"]);
                        m_sReferenceNumber = Convert.ToString(drExceptionLog["REFERENCE_NUMBER"]);
                        m_dtLogDate = Convert.ToDateTime(drExceptionLog["LOG_DATE"]);
                        m_sSource = Convert.ToString(drExceptionLog["SOURCE"]);
                        m_sDescription = Convert.ToString(drExceptionLog["DESCRIPTION"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Load(int iID)
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader drExceptionLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "spPFS_ExceptionLogGet", iID))
                {
                    if (drExceptionLog.Read())
                    {
                        m_lExceptionLogID = Convert.ToInt64(drExceptionLog["PFS_EXCEPTION_LOG_ID"]);
                        m_sReferenceNumber = Convert.ToString(drExceptionLog["REFERENCE_NUMBER"]);
                        m_dtLogDate = Convert.ToDateTime(drExceptionLog["LOG_DATE"]);
                        m_sSource = Convert.ToString(drExceptionLog["SOURCE"]);
                        m_sDescription = Convert.ToString(drExceptionLog["DESCRIPTION"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = false;
                bIsSuccess = DAL_Update(oTrans);
                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                bool bIsSuccess = false;
                if (m_lExceptionLogID > 0)
                {
                    int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "spPFS_ExceptionLogUpdate",
                    m_lExceptionLogID,
                                        m_sReferenceNumber,
                                        m_dtLogDate,
                                        m_sSource,
                                        m_sDescription
                    );
                    bIsSuccess = (iRowAffected > 0);
                }
                else
                {
                    bIsSuccess = DAL_Add(p_oTrans);
                }
                return (bIsSuccess);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {

                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "spPFS_ExceptionLogDelete", m_lExceptionLogID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }

        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_lExceptionLogID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ExceptionLogAdd",
                    m_sReferenceNumber,
                    m_dtLogDate,
                    m_sSource,
                    m_sDescription
                    ));

                bool bIsSuccess = (m_lExceptionLogID >= 0);


                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion
    } 
} 
