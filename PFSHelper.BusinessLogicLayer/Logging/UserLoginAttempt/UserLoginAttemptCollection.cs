


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	[System.Xml.Serialization.XmlRoot("UserLoginAttempt")]
	public partial class UserLoginAttemptCollection  : ICollection
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
        private ArrayList m_oUserLoginAttemptList = new ArrayList();
		private int m_iPageSize = 10;
		private int m_iPageNumber = 1;
		#endregion
		#region Region: Constructor///////////////////////////////////////////////////////////////////
		public UserLoginAttemptCollection()
		{
			m_iPageSize = 10;
			m_iPageNumber = 1;
		}
		#endregion
		#region Region: Properties///////////////////////////////////////////////////////////////////		
		public UserLoginAttempt this[int index]
        {
            get { return (UserLoginAttempt)m_oUserLoginAttemptList[index]; }
        }
        public int Count
        {
            get { return m_oUserLoginAttemptList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
		public int PageSize
        {
            get { return m_iPageSize; }
			set { m_iPageSize = value; }
        }
		public int PageNumber
        {
            get { return m_iPageNumber; }
			set { m_iPageNumber = value; }
        }
		#endregion
		#region Region: List Method///////////////////////////////////////////////////////////////////		
		public void Sort(IComparer oComparer)
		{
			m_oUserLoginAttemptList.Sort(oComparer);
		}

		public void Reverse()
		{
			m_oUserLoginAttemptList.Reverse();
		}

        public void CopyTo(Array a, int index)
        {
            m_oUserLoginAttemptList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oUserLoginAttemptList.GetEnumerator();
        }
        public void Add(UserLoginAttempt oObject)
        {
            m_oUserLoginAttemptList.Add(oObject);
        }
		public void RemoveAt(int index)
		{
			m_oUserLoginAttemptList.RemoveAt(index);
		}
		#endregion
		#region Region: Field Enumeration ///////////////////////////////////////////////////////////
		public enum UserLoginAttemptFields 
		{
			UserLoginAttemptID,
			UserName,
			LastSuccessfullLoginDate,
			LastFailedLoginDate,
			TotalSuccess,
			TotalFailed,
			LastFailedDescription
		}//End Enum
		#endregion
		#region Region: Sort Method///////////////////////////////////////////////////////////////////
		public void Sort (UserLoginAttemptFields sortField, bool isAscending) 
		{
			switch (sortField) 
			{		
					
			case UserLoginAttemptFields.UserLoginAttemptID:
				this.Sort(new UserLoginAttemptIDComparer());
				break;
		
			case UserLoginAttemptFields.UserName:
				this.Sort(new UserNameComparer());
				break;
		
			case UserLoginAttemptFields.LastSuccessfullLoginDate:
				this.Sort(new LastSuccessfullLoginDateComparer());
				break;
		
			case UserLoginAttemptFields.LastFailedLoginDate:
				this.Sort(new LastFailedLoginDateComparer());
				break;
		
			case UserLoginAttemptFields.TotalSuccess:
				this.Sort(new TotalSuccessComparer());
				break;
		
			case UserLoginAttemptFields.TotalFailed:
				this.Sort(new TotalFailedComparer());
				break;
		
			case UserLoginAttemptFields.LastFailedDescription:
				this.Sort(new LastFailedDescriptionComparer());
				break;
			}
			if(!isAscending) this.Reverse();
		}//End SortField
		#endregion
		#region Region: IComparer///////////////////////////////////////////////////////////////////

		private sealed class UserLoginAttemptIDComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.UserLoginAttemptID.CompareTo(second.UserLoginAttemptID);
			}
		}	
		private sealed class UserNameComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.UserName.CompareTo(second.UserName);
			}
		}	
		private sealed class LastSuccessfullLoginDateComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.LastSuccessfullLoginDate.CompareTo(second.LastSuccessfullLoginDate);
			}
		}	
		private sealed class LastFailedLoginDateComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.LastFailedLoginDate.CompareTo(second.LastFailedLoginDate);
			}
		}	
		private sealed class TotalSuccessComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.TotalSuccess.CompareTo(second.TotalSuccess);
			}
		}	
		private sealed class TotalFailedComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.TotalFailed.CompareTo(second.TotalFailed);
			}
		}	
		private sealed class LastFailedDescriptionComparer:IComparer
		{
			public int Compare(object x, object y) 
			{
				UserLoginAttempt first = (UserLoginAttempt) x;
				UserLoginAttempt second = (UserLoginAttempt) y;
				return first.LastFailedDescription.CompareTo(second.LastFailedDescription);
			}
		}	
		#endregion
		#region Region: Data Access Layer ///////////////////////////////////////////////////////////////////
		public bool DAL_Load(
						string sKeyWords,
						object dtLastSuccessfullLoginDateFrom,
						object dtLastSuccessfullLoginDateTo,
						object dtLastFailedLoginDateFrom,
						object dtLastFailedLoginDateTo
						
						)
        {
            try
            {
				
				using(SqlDataReader drUserLoginAttempt = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserLoginAttemptList",
					sKeyWords ,
					dtLastSuccessfullLoginDateFrom,
					dtLastSuccessfullLoginDateTo,
					dtLastFailedLoginDateFrom,
					dtLastFailedLoginDateTo
					))
            	{
					if (drUserLoginAttempt.HasRows)
                    {
						while (drUserLoginAttempt.Read())
						{
							UserLoginAttempt oUserLoginAttempt =  new UserLoginAttempt();		
							oUserLoginAttempt.UserLoginAttemptID = Convert.ToInt32(drUserLoginAttempt["PFS_USER_LOGIN_ATTEMPT_ID"]);
							oUserLoginAttempt.UserName = Convert.ToString(drUserLoginAttempt["USER_NAME"]);
							oUserLoginAttempt.LastSuccessfullLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_SUCCESSFULL_LOGIN_DATE"]);
							oUserLoginAttempt.LastFailedLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_FAILED_LOGIN_DATE"]);
							oUserLoginAttempt.TotalSuccess = Convert.ToInt32(drUserLoginAttempt["TOTAL_SUCCESS"]);
							oUserLoginAttempt.TotalFailed = Convert.ToInt32(drUserLoginAttempt["TOTAL_FAILED"]);
							oUserLoginAttempt.LastFailedDescription = Convert.ToString(drUserLoginAttempt["LAST_FAILED_DESCRIPTION"]);
							this.Add(oUserLoginAttempt);
						}
						return true;
					} //*** if (dr.HasRows)
					else 
					{
						return false;
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }

		
		public bool DAL_Load()
        {
            try
            {
				using(SqlDataReader drUserLoginAttempt = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserLoginAttemptList"))
            	{
					if (drUserLoginAttempt.HasRows)
                    {
						while (drUserLoginAttempt.Read())
						{
							UserLoginAttempt oUserLoginAttempt =  new UserLoginAttempt();		
							oUserLoginAttempt.UserLoginAttemptID = Convert.ToInt32(drUserLoginAttempt["PFS_USER_LOGIN_ATTEMPT_ID"]);
							oUserLoginAttempt.UserName = Convert.ToString(drUserLoginAttempt["USER_NAME"]);
							oUserLoginAttempt.LastSuccessfullLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_SUCCESSFULL_LOGIN_DATE"]);
							oUserLoginAttempt.LastFailedLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_FAILED_LOGIN_DATE"]);
							oUserLoginAttempt.TotalSuccess = Convert.ToInt32(drUserLoginAttempt["TOTAL_SUCCESS"]);
							oUserLoginAttempt.TotalFailed = Convert.ToInt32(drUserLoginAttempt["TOTAL_FAILED"]);
							oUserLoginAttempt.LastFailedDescription = Convert.ToString(drUserLoginAttempt["LAST_FAILED_DESCRIPTION"]);
							this.Add(oUserLoginAttempt);
						}
						return true;
					}
					else 
					{
						return false;	
					}
            	}
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		


		public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Update(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
               PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Update(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (UserLoginAttempt oUserLoginAttempt in m_oUserLoginAttemptList)
				{
					bool bIsSuccess = oUserLoginAttempt.DAL_Update(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oUserLoginAttemptList.Count)
                    return false;
                else
                    return true;
			}

			catch (Exception ex)
			{
                throw ex;
			}
		}	
		
		
		public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (UserLoginAttempt oUserLoginAttempt in m_oUserLoginAttemptList)
				{
					bool bIsSuccess = oUserLoginAttempt.DAL_Add(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oUserLoginAttemptList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Delete(SqlTransaction p_oTrans)
		{
			try
			{
				int iSuccessCounter = 0;
				foreach (UserLoginAttempt oUserLoginAttempt in m_oUserLoginAttemptList)
				{
					bool bIsSuccess = oUserLoginAttempt.DAL_Delete(p_oTrans);
					if (!bIsSuccess) break;
                    iSuccessCounter++;
				}
				if (iSuccessCounter < m_oUserLoginAttemptList.Count)
                    return false;
                else
                    return true;
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}	
		#endregion
	} //** Class
} //** Name Space
