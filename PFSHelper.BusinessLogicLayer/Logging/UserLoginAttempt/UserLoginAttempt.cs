


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	public partial class UserLoginAttempt
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
		protected int m_iUserLoginAttemptID = 0;
		protected string m_sUserName = string.Empty;
		protected DateTime m_dtLastSuccessfullLoginDate = DateTime.Parse("01/01/1900");
		protected DateTime m_dtLastFailedLoginDate = DateTime.Parse("01/01/1900");
		protected int m_iTotalSuccess = 0;
		protected int m_iTotalFailed = 0;
		protected string m_sLastFailedDescription = "-";
		#endregion
		
		#region Region: Constructor////////////////////////////////////////////////////////////////
		public UserLoginAttempt()
		{
			m_iUserLoginAttemptID = -1;
		}	
		public UserLoginAttempt(int iID)
		{
			m_iUserLoginAttemptID = iID;
		}

		public UserLoginAttempt(
			int iUserLoginAttemptID,
			string sUserName,
			DateTime dtLastSuccessfullLoginDate,
			DateTime dtLastFailedLoginDate,
			int iTotalSuccess,
			int iTotalFailed,
			string sLastFailedDescription
			)
		{
			m_iUserLoginAttemptID = iUserLoginAttemptID;
			m_sUserName = sUserName;
			m_dtLastSuccessfullLoginDate = dtLastSuccessfullLoginDate;
			m_dtLastFailedLoginDate = dtLastFailedLoginDate;
			m_iTotalSuccess = iTotalSuccess;
			m_iTotalFailed = iTotalFailed;
			m_sLastFailedDescription = sLastFailedDescription;
		}

		#endregion
		
		#region Region: Properties/////////////////////////////////////////////////////////////////
		
		public int UserLoginAttemptID
		{
			get {return m_iUserLoginAttemptID;}
			set {m_iUserLoginAttemptID = value;}
		}

		public string UserName
		{
			get {return m_sUserName;}
			set {m_sUserName = value;}
		}

		public DateTime LastSuccessfullLoginDate
		{
			get {return m_dtLastSuccessfullLoginDate;}
			set {m_dtLastSuccessfullLoginDate = value;}
		}

		public DateTime LastFailedLoginDate
		{
			get {return m_dtLastFailedLoginDate;}
			set {m_dtLastFailedLoginDate = value;}
		}

		public int TotalSuccess
		{
			get {return m_iTotalSuccess;}
			set {m_iTotalSuccess = value;}
		}

		public int TotalFailed
		{
			get {return m_iTotalFailed;}
			set {m_iTotalFailed = value;}
		}

		public string LastFailedDescription
		{
			get {return m_sLastFailedDescription;}
			set {m_sLastFailedDescription = value;}
		}
		#endregion
		
		#region Region: Data Access Methods////////////////////////////////////////////////////////
		public bool DAL_Load()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drUserLoginAttempt = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserLoginAttemptGet", m_iUserLoginAttemptID))
            	{
					if(drUserLoginAttempt.Read())
            		{      
						m_iUserLoginAttemptID = Convert.ToInt32(drUserLoginAttempt["PFS_USER_LOGIN_ATTEMPT_ID"]);
						m_sUserName = Convert.ToString(drUserLoginAttempt["USER_NAME"]);
						m_dtLastSuccessfullLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_SUCCESSFULL_LOGIN_DATE"]);
						m_dtLastFailedLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_FAILED_LOGIN_DATE"]);
						m_iTotalSuccess = Convert.ToInt32(drUserLoginAttempt["TOTAL_SUCCESS"]);
						m_iTotalFailed = Convert.ToInt32(drUserLoginAttempt["TOTAL_FAILED"]);
						m_sLastFailedDescription = Convert.ToString(drUserLoginAttempt["LAST_FAILED_DESCRIPTION"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }	
		
		public bool DAL_Load(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drUserLoginAttempt = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_UserLoginAttemptGet",iID))
            	{
					if(drUserLoginAttempt.Read())
            		{      
						m_iUserLoginAttemptID = Convert.ToInt32(drUserLoginAttempt["PFS_USER_LOGIN_ATTEMPT_ID"]);
						m_sUserName = Convert.ToString(drUserLoginAttempt["USER_NAME"]);
						m_dtLastSuccessfullLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_SUCCESSFULL_LOGIN_DATE"]);
						m_dtLastFailedLoginDate = Convert.ToDateTime(drUserLoginAttempt["LAST_FAILED_LOGIN_DATE"]);
						m_iTotalSuccess = Convert.ToInt32(drUserLoginAttempt["TOTAL_SUCCESS"]);
						m_iTotalFailed = Convert.ToInt32(drUserLoginAttempt["TOTAL_FAILED"]);
						m_sLastFailedDescription = Convert.ToString(drUserLoginAttempt["LAST_FAILED_DESCRIPTION"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Update() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_Update(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_Update(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iUserLoginAttemptID > 0)
				{
					int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserLoginAttemptUpdate",
					m_iUserLoginAttemptID,
										m_sUserName,
										m_dtLastSuccessfullLoginDate,
										m_dtLastFailedLoginDate,
										m_iTotalSuccess,
										m_iTotalFailed,
										m_sLastFailedDescription
					));
					bIsSuccess = (iError == 0);
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}			
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		
		public bool DAL_Delete() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans) 
        {
            try
            {
										
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_UserLoginAttemptDelete", m_iUserLoginAttemptID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }	
        
		public bool DAL_Add() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iUserLoginAttemptID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserLoginAttemptAdd", 

					m_sUserName,
					m_dtLastSuccessfullLoginDate,
					m_dtLastFailedLoginDate,
					m_iTotalSuccess,
					m_iTotalFailed,
					m_sLastFailedDescription
					));
					
				bool bIsSuccess = (m_iUserLoginAttemptID >=0);
				
				
				return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		
		//*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
		#endregion
	} //** Class
} //** Name Space
