using System;
using System.Collections;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2013, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.1
    [System.Xml.Serialization.XmlRoot("UserLogs")]
    public partial class UserLogCollection : ICollection
    {
        #region Region: Member Variables///////////////////////////////////////////////////////
        private ArrayList m_oUserLogList = new ArrayList();
        #endregion
        #region Region: Properties/////////////////////////////////////////////////////////////
        public UserLog this[int index]
        {
            get { return (UserLog)m_oUserLogList[index]; }
        }
        public int Count
        {
            get { return m_oUserLogList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
        #endregion
        #region Region: List Method////////////////////////////////////////////////////////////
        public void Sort(IComparer oComparer)
        {
            m_oUserLogList.Sort(oComparer);
        }
        public void Reverse()
        {
            m_oUserLogList.Reverse();
        }
        public void CopyTo(Array a, int index)
        {
            m_oUserLogList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oUserLogList.GetEnumerator();
        }
        public void Add(UserLog oObject)
        {
            m_oUserLogList.Add(oObject);
        }
        public void RemoveAt(int index)
        {
            m_oUserLogList.RemoveAt(index);
        }
        public void Clear()
        {
            m_oUserLogList.Clear();
        }
        #endregion
        #region Region: Field Enumeration /////////////////////////////////////////////////////
        public enum UserLogFields
        {
            UserLogID,
            UserName,
            ReferenceNumber,
            IpAddress,
            LogDate,
            Description,
            Detail,
            Status,
            ModuleObjectMemberID,
            IsPurge,
            PreviousDetail,
            MemberCode,
            MemberName
        }
        #endregion
        #region Region: Sort Method////////////////////////////////////////////////////////////
        public void Sort(UserLogFields sortField, bool isAscending)
        {
            switch (sortField)
            {
                case UserLogFields.UserLogID:
                    this.Sort(new UserLogIDComparer());
                    break;
                case UserLogFields.UserName:
                    this.Sort(new UserNameComparer());
                    break;
                case UserLogFields.ReferenceNumber:
                    this.Sort(new ReferenceNumberComparer());
                    break;
                case UserLogFields.IpAddress:
                    this.Sort(new IpAddressComparer());
                    break;
                case UserLogFields.LogDate:
                    this.Sort(new LogDateComparer());
                    break;
                case UserLogFields.Description:
                    this.Sort(new DescriptionComparer());
                    break;
                case UserLogFields.Detail:
                    this.Sort(new DetailComparer());
                    break;
                case UserLogFields.Status:
                    this.Sort(new StatusComparer());
                    break;
                case UserLogFields.ModuleObjectMemberID:
                    this.Sort(new ModuleObjectMemberIDComparer());
                    break;
                case UserLogFields.IsPurge:
                    this.Sort(new IsPurgeComparer());
                    break;
                case UserLogFields.PreviousDetail:
                    this.Sort(new PreviousDetailComparer());
                    break;
                case UserLogFields.MemberCode:
                    this.Sort(new MemberCodeComparer());
                    break;
                case UserLogFields.MemberName:
                    this.Sort(new MemberNameComparer());
                    break;
            }
            if (!isAscending) this.Reverse();
        }
        #endregion
        #region Region: IComparer//////////////////////////////////////////////////////////////
        private sealed class UserLogIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.UserLogID.CompareTo(second.UserLogID);
            }
        }
        private sealed class UserNameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.UserName.CompareTo(second.UserName);
            }
        }
        private sealed class ReferenceNumberComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.ReferenceNumber.CompareTo(second.ReferenceNumber);
            }
        }
        private sealed class IpAddressComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.IpAddress.CompareTo(second.IpAddress);
            }
        }
        private sealed class LogDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.LogDate.CompareTo(second.LogDate);
            }
        }
        private sealed class DescriptionComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.Description.CompareTo(second.Description);
            }
        }
        private sealed class DetailComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.Detail.CompareTo(second.Detail);
            }
        }
        private sealed class StatusComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.Status.CompareTo(second.Status);
            }
        }
        private sealed class ModuleObjectMemberIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.ModuleObjectMemberID.CompareTo(second.ModuleObjectMemberID);
            }
        }
        private sealed class IsPurgeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.IsPurge.CompareTo(second.IsPurge);
            }
        }
        private sealed class PreviousDetailComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.PreviousDetail.CompareTo(second.PreviousDetail);
            }
        }
        private sealed class MemberCodeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.MemberCode.CompareTo(second.MemberCode);
            }
        }
        private sealed class MemberNameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                UserLog first = (UserLog)x;
                UserLog second = (UserLog)y;
                return first.MemberName.CompareTo(second.MemberName);
            }
        }
        #endregion
        #region Region: Data Access Layer /////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserLogList"))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            UserLog oUserLog = new UserLog();
                            oUserLog.UserLogID = Convert.ToInt64(dr["PFS_USER_LOG_ID"]);
                            oUserLog.UserName = Convert.ToString(dr["USER_NAME"]);
                            oUserLog.ReferenceNumber = Convert.ToString(dr["REFERENCE_NUMBER"]);
                            oUserLog.IpAddress = Convert.ToString(dr["IP_ADDRESS"]);
                            oUserLog.LogDate = Convert.ToDateTime(dr["LOG_DATE"]);
                            oUserLog.Description = Convert.ToString(dr["DESCRIPTION"]);
                            oUserLog.Detail = Convert.ToString(dr["DETAIL"]);
                            oUserLog.Status = Convert.ToInt16(dr["STATUS"]);
                            oUserLog.ModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                            oUserLog.IsPurge = Convert.ToBoolean(dr["IS_PURGE"]);
                            oUserLog.PreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                            oUserLog.MemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                            oUserLog.MemberName = Convert.ToString(dr["MEMBER_NAME"]);
                            this.Add(oUserLog);
                        }
                        return true;
                    }
                    else return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Load(
            string p_sKeyWords,
            object p_dtLogDateFrom,
            object p_dtLogDateTo,
            object p_iModuleObjectMemberID,
            object p_bIsPurge


        )
        {
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserLogList",
                    p_sKeyWords,
                    p_dtLogDateFrom,
                    p_dtLogDateTo,
                    p_iModuleObjectMemberID,
                    p_bIsPurge

                ))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            UserLog oUserLog = new UserLog();
                            oUserLog.UserLogID = Convert.ToInt64(dr["PFS_USER_LOG_ID"]);
                            oUserLog.UserName = Convert.ToString(dr["USER_NAME"]);
                            oUserLog.ReferenceNumber = Convert.ToString(dr["REFERENCE_NUMBER"]);
                            oUserLog.IpAddress = Convert.ToString(dr["IP_ADDRESS"]);
                            oUserLog.LogDate = Convert.ToDateTime(dr["LOG_DATE"]);
                            oUserLog.Description = Convert.ToString(dr["DESCRIPTION"]);
                            oUserLog.Detail = Convert.ToString(dr["DETAIL"]);
                            oUserLog.Status = Convert.ToInt16(dr["STATUS"]);
                            oUserLog.ModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                            oUserLog.IsPurge = Convert.ToBoolean(dr["IS_PURGE"]);
                            oUserLog.PreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                            oUserLog.MemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                            oUserLog.MemberName = Convert.ToString(dr["MEMBER_NAME"]);
                            this.Add(oUserLog);
                        }
                        return true;
                    }
                    else return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_LoadByModuleObjectMemberID(int p_iID)
        {
            try
            {
                return DAL_Load(
                    null,
                    null,
                    null,
                    p_iID,
                    null


                );
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Add(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (UserLog oUserLog in m_oUserLogList)
                {
                    if (!oUserLog.DAL_Add(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Update(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (UserLog oUserLog in m_oUserLogList)
                {
                    if (!oUserLog.DAL_Update(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Delete(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (UserLog oUserLog in m_oUserLogList)
                {
                    if (!oUserLog.DAL_Delete(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}