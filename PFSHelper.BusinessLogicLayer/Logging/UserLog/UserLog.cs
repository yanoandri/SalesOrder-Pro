using System;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2013, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.1
    public partial class UserLog
    {
        #region Region: Member Variables///////////////////////////////////////////////////////
        protected long m_iUserLogID = 0;
        protected string m_sUserName = "NONE";
        protected string m_sReferenceNumber = "NONE";
        protected string m_sIpAddress = "NONE";
        protected DateTime m_dtLogDate = DateTime.Parse("01/01/1900");
        protected string m_sDescription = "NONE";
        protected string m_xmlDetail;
        protected short m_iStatus = 0;
        protected int m_iModuleObjectMemberID = 0;
        protected bool m_bIsPurge = false;
        protected string m_xmlPreviousDetail;
        protected string m_sMemberCode = "NONE";
        protected string m_sMemberName = "NONE";
        #endregion

        #region Region: Constructor////////////////////////////////////////////////////////////
        public UserLog()
        {
            m_iUserLogID = -1;
        }
        public UserLog(long iID)
        {
            m_iUserLogID = iID;
        }
        public UserLog(
            long iUserLogID,
            string sUserName,
            string sReferenceNumber,
            string sIpAddress,
            DateTime dtLogDate,
            string sDescription,
            string xmlDetail,
            short iStatus,
            int iModuleObjectMemberID,
            bool bIsPurge,
            string xmlPreviousDetail
        )
        {
            m_iUserLogID = iUserLogID;
            m_sUserName = sUserName;
            m_sReferenceNumber = sReferenceNumber;
            m_sIpAddress = sIpAddress;
            m_dtLogDate = dtLogDate;
            m_sDescription = sDescription;
            m_xmlDetail = xmlDetail;
            m_iStatus = iStatus;
            m_iModuleObjectMemberID = iModuleObjectMemberID;
            m_bIsPurge = bIsPurge;
            m_xmlPreviousDetail = xmlPreviousDetail;
        }
        #endregion

        #region Region: Properties/////////////////////////////////////////////////////////////
        public long UserLogID
        {
            get { return m_iUserLogID; }
            set { m_iUserLogID = value; }
        }
        public string UserName
        {
            get { return m_sUserName; }
            set { m_sUserName = value; }
        }
        public string ReferenceNumber
        {
            get { return m_sReferenceNumber; }
            set { m_sReferenceNumber = value; }
        }
        public string IpAddress
        {
            get { return m_sIpAddress; }
            set { m_sIpAddress = value; }
        }
        public DateTime LogDate
        {
            get { return m_dtLogDate; }
            set { m_dtLogDate = value; }
        }
        public string Description
        {
            get { return m_sDescription; }
            set { m_sDescription = value; }
        }
        public string Detail
        {
            get { return m_xmlDetail; }
            set { m_xmlDetail = value; }
        }
        public short Status
        {
            get { return m_iStatus; }
            set { m_iStatus = value; }
        }
        public int ModuleObjectMemberID
        {
            get { return m_iModuleObjectMemberID; }
            set { m_iModuleObjectMemberID = value; }
        }
        public bool IsPurge
        {
            get { return m_bIsPurge; }
            set { m_bIsPurge = value; }
        }
        public string PreviousDetail
        {
            get { return m_xmlPreviousDetail; }
            set { m_xmlPreviousDetail = value; }
        }
        public string MemberCode
        {
            get { return m_sMemberCode; }
            set { m_sMemberCode = value; }
        }
        public string MemberName
        {
            get { return m_sMemberName; }
            set { m_sMemberName = value; }
        }
        #endregion

        #region Region: Data Access Methods////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserLogGet", m_iUserLogID))
                {
                    if (dr.Read())
                    {
                        m_iUserLogID = Convert.ToInt64(dr["PFS_USER_LOG_ID"]);
                        m_sUserName = Convert.ToString(dr["USER_NAME"]);
                        m_sReferenceNumber = Convert.ToString(dr["REFERENCE_NUMBER"]);
                        m_sIpAddress = Convert.ToString(dr["IP_ADDRESS"]);
                        m_dtLogDate = Convert.ToDateTime(dr["LOG_DATE"]);
                        m_sDescription = Convert.ToString(dr["DESCRIPTION"]);
                        m_xmlDetail = Convert.ToString(dr["DETAIL"]);
                        m_iStatus = Convert.ToInt16(dr["STATUS"]);
                        m_iModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                        m_bIsPurge = Convert.ToBoolean(dr["IS_PURGE"]);
                        m_xmlPreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                        m_sMemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                        m_sMemberName = Convert.ToString(dr["MEMBER_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Load(int iID)
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspPFS_UserLogGet", iID))
                {
                    if (dr.Read())
                    {
                        m_iUserLogID = Convert.ToInt64(dr["PFS_USER_LOG_ID"]);
                        m_sUserName = Convert.ToString(dr["USER_NAME"]);
                        m_sReferenceNumber = Convert.ToString(dr["REFERENCE_NUMBER"]);
                        m_sIpAddress = Convert.ToString(dr["IP_ADDRESS"]);
                        m_dtLogDate = Convert.ToDateTime(dr["LOG_DATE"]);
                        m_sDescription = Convert.ToString(dr["DESCRIPTION"]);
                        m_xmlDetail = Convert.ToString(dr["DETAIL"]);
                        m_iStatus = Convert.ToInt16(dr["STATUS"]);
                        m_iModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                        m_bIsPurge = Convert.ToBoolean(dr["IS_PURGE"]);
                        m_xmlPreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                        m_sMemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                        m_sMemberName = Convert.ToString(dr["MEMBER_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Add(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iUserLogID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserLogAdd",

                    m_sUserName,
                    m_sReferenceNumber,
                    m_sIpAddress,
                    m_dtLogDate,
                    m_sDescription,
                    m_xmlDetail,
                    m_iStatus,
                    m_iModuleObjectMemberID,
                    m_bIsPurge,
                    m_xmlPreviousDetail
                ));
                if (m_iUserLogID < 1) return false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Update(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                if (m_iUserLogID > 0)
                {
                    int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_UserLogUpdate",
                        m_iUserLogID,
                        m_sUserName,
                        m_sReferenceNumber,
                        m_sIpAddress,
                        m_dtLogDate,
                        m_sDescription,
                        m_xmlDetail,
                        m_iStatus,
                        m_iModuleObjectMemberID,
                        m_bIsPurge,
                        m_xmlPreviousDetail
                    ));
                    if (iError != 0) return false;
                }
                else return DAL_Add(p_oTrans);

                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Delete(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_UserLogDelete", m_iUserLogID);
                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}