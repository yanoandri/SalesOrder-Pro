


using System;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	public partial class SystemLog
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
		protected long m_lSystemLogID = 0;
		protected string m_sReferenceNumber = "NONE";
		protected int m_iProcessID = 0;
		protected DateTime m_dtLogDate = DateTime.Now;
		protected int m_iStatus = 0;
		protected string m_sDescription = "NONE";
		protected string m_xmlDetail;
		#endregion
		
		#region Region: Constructor////////////////////////////////////////////////////////////////
		public SystemLog()
		{
			m_lSystemLogID = -1;
		}	
		public SystemLog(long iID)
		{
			m_lSystemLogID = iID;
		}

		public SystemLog(
			long lSystemLogID,
			string sReferenceNumber,
			short iProcessID,
			DateTime dtLogDate,
			short iStatus,
			string sDescription,
			string xmlDetail
			)
		{
			m_lSystemLogID = lSystemLogID;
			m_sReferenceNumber = sReferenceNumber;
			m_iProcessID = iProcessID;
			m_dtLogDate = dtLogDate;
			m_iStatus = iStatus;
			m_sDescription = sDescription;
			m_xmlDetail = xmlDetail;
		}

		#endregion
		
		#region Region: Properties/////////////////////////////////////////////////////////////////
		
		public long SystemLogID
		{
			get {return m_lSystemLogID;}
			set {m_lSystemLogID = value;}
		}

		public string ReferenceNumber
		{
			get {return m_sReferenceNumber;}
			set {m_sReferenceNumber = value;}
		}

		public int ProcessID
		{
			get {return m_iProcessID;}
			set {m_iProcessID = value;}
		}

		public DateTime LogDate
		{
			get {return m_dtLogDate;}
			set {m_dtLogDate = value;}
		}

		public int Status
		{
			get {return m_iStatus;}
			set {m_iStatus = value;}
		}

		public string Description
		{
			get {return m_sDescription;}
			set {m_sDescription = value;}
		}

		public string Detail
		{
			get {return m_xmlDetail;}
			set {m_xmlDetail = value;}
		}

		#endregion
		
		#region Region: Data Access Methods////////////////////////////////////////////////////////
		public bool DAL_Load()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drSystemLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_SystemLogGet", m_lSystemLogID))
            	{
					if(drSystemLog.Read())
            		{      
						m_lSystemLogID = Convert.ToInt64(drSystemLog["PFS_SYSTEM_LOG_ID"]);
						m_sReferenceNumber = Convert.ToString(drSystemLog["REFERENCE_NUMBER"]);
						m_iProcessID = Convert.ToInt32(drSystemLog["COM_PROCESS_ID"]);
						m_dtLogDate = Convert.ToDateTime(drSystemLog["LOG_DATE"]);
						m_iStatus = Convert.ToInt32(drSystemLog["STATUS"]);
						m_sDescription = Convert.ToString(drSystemLog["DESCRIPTION"]);
                        m_xmlDetail = Convert.ToString(drSystemLog["DETAIL"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }	
		
		public bool DAL_Load(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drSystemLog = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_SystemLogGet",iID))
            	{
					if(drSystemLog.Read())
            		{      
						m_lSystemLogID = Convert.ToInt64(drSystemLog["PFS_SYSTEM_LOG_ID"]);
						m_sReferenceNumber = Convert.ToString(drSystemLog["REFERENCE_NUMBER"]);
						m_iProcessID = Convert.ToInt32(drSystemLog["COM_PROCESS_ID"]);
						m_dtLogDate = Convert.ToDateTime(drSystemLog["LOG_DATE"]);
						m_iStatus = Convert.ToInt32(drSystemLog["STATUS"]);
						m_sDescription = Convert.ToString(drSystemLog["DESCRIPTION"]);
                        m_xmlDetail = Convert.ToString(drSystemLog["DETAIL"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Update() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_Update(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_Update(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_lSystemLogID > 0)
				{
					int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_SystemLogUpdate",
					m_lSystemLogID,
										m_sReferenceNumber,
										m_iProcessID,
										m_dtLogDate,
										m_iStatus,
										m_sDescription,
										m_xmlDetail
					));
					bIsSuccess = (iError == 0);
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}			
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		
		public bool DAL_Delete() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans) 
        {
            try
            {
										
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_SystemLogDelete", m_lSystemLogID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }	
        
		public bool DAL_Add() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_lSystemLogID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_SystemLogAdd", 

					m_sReferenceNumber,
					m_iProcessID,
					m_dtLogDate,
					m_iStatus,
					m_sDescription,
					m_xmlDetail
					));
					
				bool bIsSuccess = (m_lSystemLogID >=0);
				
				
				return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		
		//*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
		public static SqlDataReader DAL_SystemLogProcessList()
		{
			try
			{
				SqlDataReader dr = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "LOOKUP_uspPFS_SystemLogProcessList"); 
				return dr;
			}
			catch(Exception ex)
			{
				throw(ex);
			}			
		}		
		#endregion
	} //** Class
} //** Name Space
