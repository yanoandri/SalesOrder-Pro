


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2012, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.0
    public partial class SysParam
    {
        #region Region: Member Variables///////////////////////////////////////////////////////////
        protected string m_sCode = "NONE";
        protected string m_sDescription = "NONE";
        protected string m_sValue = "NONE";
        protected string m_sDataType = "NONE";
        protected bool m_bIsVisible = false;
        protected int m_iSysParamGroupID = 0;
        protected string m_sSysParamName = "NONE";
        protected int m_iIndexOrder = 0;
        protected bool m_bIsEncrypted = false;
        protected string m_sParamGroupName = "NONE";
        #endregion

        #region Region: Constructor////////////////////////////////////////////////////////////////
        public SysParam()
        {
            m_sCode = string.Empty;
        }
        public SysParam(string iID)
        {
            m_sCode = iID;
        }

        public SysParam(
            string sCode,
            string sDescription,
            string sValue,
            string sDataType,
            bool bIsVisible,
            int iSysParamGroupID,
            string sSysParamName,
            int iIndexOrder,
            bool bIsEncrypted
            )
        {
            m_sCode = sCode;
            m_sDescription = sDescription;
            m_sValue = sValue;
            m_sDataType = sDataType;
            m_bIsVisible = bIsVisible;
            m_iSysParamGroupID = iSysParamGroupID;
            m_sSysParamName = sSysParamName;
            m_iIndexOrder = iIndexOrder;
            m_bIsEncrypted = bIsEncrypted;
        }

        #endregion

        #region Region: Properties/////////////////////////////////////////////////////////////////

        public string Code
        {
            get { return m_sCode; }
            set { m_sCode = value; }
        }

        public string Description
        {
            get { return m_sDescription; }
            set { m_sDescription = value; }
        }

        public string Value
        {
            get { return m_sValue; }
            set { m_sValue = value; }
        }

        public string DataType
        {
            get { return m_sDataType; }
            set { m_sDataType = value; }
        }

        public bool IsVisible
        {
            get { return m_bIsVisible; }
            set { m_bIsVisible = value; }
        }

        public int SysParamGroupID
        {
            get { return m_iSysParamGroupID; }
            set { m_iSysParamGroupID = value; }
        }

        public string SysParamName
        {
            get { return m_sSysParamName; }
            set { m_sSysParamName = value; }
        }

        public int IndexOrder
        {
            get { return m_iIndexOrder; }
            set { m_iIndexOrder = value; }
        }

        public bool IsEncrypted
        {
            get { return m_bIsEncrypted; }
            set { m_bIsEncrypted = value; }
        }

        public string ParamGroupName
        {
            get { return m_sParamGroupName; }
            set { m_sParamGroupName = value; }
        }
        #endregion

        #region Region: Data Access Methods////////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader drSysParam = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_SysParamGet", m_sCode))
                {
                    if (drSysParam.Read())
                    {
                        m_sCode = Convert.ToString(drSysParam["CODE"]);
                        m_sDescription = Convert.ToString(drSysParam["DESCRIPTION"]);
                        m_sValue = Convert.ToString(drSysParam["VALUE"]);
                        m_sDataType = Convert.ToString(drSysParam["DATA_TYPE"]);
                        m_bIsVisible = Convert.ToBoolean(drSysParam["IS_VISIBLE"]);
                        m_iSysParamGroupID = Convert.ToInt32(drSysParam["PFS_SYS_PARAM_GROUP_ID"]);
                        m_sSysParamName = Convert.ToString(drSysParam["SYS_PARAM_NAME"]);
                        m_iIndexOrder = Convert.ToInt32(drSysParam["INDEX_ORDER"]);
                        m_bIsEncrypted = Convert.ToBoolean(drSysParam["IS_ENCRYPTED"]);
                        m_sParamGroupName = Convert.ToString(drSysParam["PARAM_GROUP_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Load(int iID)
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader drSysParam = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_SysParamGet", iID))
                {
                    if (drSysParam.Read())
                    {
                        m_sCode = Convert.ToString(drSysParam["CODE"]);
                        m_sDescription = Convert.ToString(drSysParam["DESCRIPTION"]);
                        m_sValue = Convert.ToString(drSysParam["VALUE"]);
                        m_sDataType = Convert.ToString(drSysParam["DATA_TYPE"]);
                        m_bIsVisible = Convert.ToBoolean(drSysParam["IS_VISIBLE"]);
                        m_iSysParamGroupID = Convert.ToInt32(drSysParam["PFS_SYS_PARAM_GROUP_ID"]);
                        m_sSysParamName = Convert.ToString(drSysParam["SYS_PARAM_NAME"]);
                        m_iIndexOrder = Convert.ToInt32(drSysParam["INDEX_ORDER"]);
                        m_bIsEncrypted = Convert.ToBoolean(drSysParam["IS_ENCRYPTED"]);
                        m_sParamGroupName = Convert.ToString(drSysParam["PARAM_GROUP_NAME"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = false;
                bIsSuccess = DAL_Update(oTrans);
                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                bool bIsSuccess = false;
                if (m_sCode.Length > 0)
                {
                    int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_SysParamUpdate",
                    m_sCode,
                                        m_sDescription,
                                        m_sValue,
                                        m_sDataType,
                                        m_bIsVisible,
                                        m_iSysParamGroupID,
                                        m_sSysParamName,
                                        m_iIndexOrder,
                                        m_bIsEncrypted
                    ));
                    bIsSuccess = (iError == 0);
                }
                else
                {
                    bIsSuccess = DAL_Add(p_oTrans);
                }
                return (bIsSuccess);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {

                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_SysParamDelete", m_sCode);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_sCode = Convert.ToString(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_SysParamAdd",

                    m_sDescription,
                    m_sValue,
                    m_sDataType,
                    m_bIsVisible,
                    m_iSysParamGroupID,
                    m_sSysParamName,
                    m_iIndexOrder,
                    m_bIsEncrypted
                    ));

                bool bIsSuccess = (Convert.ToInt32(m_sCode) >= 0);


                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
        public static SqlDataReader DAL_SysParamSysParamGroupList()
        {
            try
            {
                SqlDataReader dr = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "LOOKUP_uspPFS_SysParamSysParamGroupList");
                return dr;
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }
        #endregion
    } //** Class
} //** Name Space
