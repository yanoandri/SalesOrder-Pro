


using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2011, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace PFSHelper.BusinessLogicLayer
{
	//Standard class autogenerated by PFS Generator v5.0
	public partial class ModuleObject
	{
		#region Region: Member Variables///////////////////////////////////////////////////////////
		protected ModuleObjectMemberCollection m_oModuleObjectMemberCollection = null;
		protected int m_iModuleObjectID = 0;
		protected int m_iModuleID = 0;
		protected string m_sObjectCode = "NONE";
		protected string m_sObjectName = "NONE";
		protected string m_sObjectDescr = "NONE";
		protected short m_iIndexOrder = 0;
		protected string m_sModuleCode = "NONE";
		protected string m_sModuleName = "NONE";
		#endregion
		
		#region Region: Constructor////////////////////////////////////////////////////////////////
		public ModuleObject()
		{
			m_iModuleObjectID = -1;
			m_oModuleObjectMemberCollection = new ModuleObjectMemberCollection();
		}	
		public ModuleObject(int iID)
		{
			m_oModuleObjectMemberCollection = new ModuleObjectMemberCollection();
			m_iModuleObjectID = iID;
		}

		public ModuleObject(
			ModuleObjectMember oModuleObjectMembers,
			int iModuleObjectID,
			int iModuleID,
			string sObjectCode,
			string sObjectName,
			string sObjectDescr,
			short iIndexOrder
			)
		{
			m_oModuleObjectMemberCollection = new ModuleObjectMemberCollection();
			m_iModuleObjectID = iModuleObjectID;
			m_iModuleID = iModuleID;
			m_sObjectCode = sObjectCode;
			m_sObjectName = sObjectName;
			m_sObjectDescr = sObjectDescr;
			m_iIndexOrder = iIndexOrder;
		}

		#endregion
		
		#region Region: Properties/////////////////////////////////////////////////////////////////
		public ModuleObjectMemberCollection ModuleObjectMembers
		{
			get{ return m_oModuleObjectMemberCollection; }
			set{ m_oModuleObjectMemberCollection = value; }
		}
		
		public int ModuleObjectID
		{
			get {return m_iModuleObjectID;}
			set {m_iModuleObjectID = value;}
		}

		public int ModuleID
		{
			get {return m_iModuleID;}
			set {m_iModuleID = value;}
		}

		public string ObjectCode
		{
			get {return m_sObjectCode;}
			set {m_sObjectCode = value;}
		}

		public string ObjectName
		{
			get {return m_sObjectName;}
			set {m_sObjectName = value;}
		}

		public string ObjectDescr
		{
			get {return m_sObjectDescr;}
			set {m_sObjectDescr = value;}
		}

		public short IndexOrder
		{
			get {return m_iIndexOrder;}
			set {m_iIndexOrder = value;}
		}

		public string ModuleCode
		{
			get {return m_sModuleCode;}
			set {m_sModuleCode = value;}
		}

		public string ModuleName
		{
			get {return m_sModuleName;}
			set {m_sModuleName = value;}
		}
		#endregion
		
		#region Region: Data Access Methods////////////////////////////////////////////////////////
		public bool DAL_Load()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModuleObject = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectGet", m_iModuleObjectID))
            	{
					if(drModuleObject.Read())
            		{      
						m_iModuleObjectID = Convert.ToInt32(drModuleObject["PFS_MODULE_OBJECT_ID"]);
						m_iModuleID = Convert.ToInt32(drModuleObject["PFS_MODULE_ID"]);
						m_sObjectCode = Convert.ToString(drModuleObject["OBJECT_CODE"]);
						m_sObjectName = Convert.ToString(drModuleObject["OBJECT_NAME"]);
						m_sObjectDescr = Convert.ToString(drModuleObject["OBJECT_DESCR"]);
						m_iIndexOrder = Convert.ToInt16(drModuleObject["INDEX_ORDER"]);
						m_sModuleCode = Convert.ToString(drModuleObject["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModuleObject["MODULE_NAME"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }	
		public bool DAL_LoadWithChild()
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModuleObject = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectGet", m_iModuleObjectID))
            	{
					if(drModuleObject.Read())
            		{      
						m_iModuleObjectID = Convert.ToInt32(drModuleObject["PFS_MODULE_OBJECT_ID"]);
						m_iModuleID = Convert.ToInt32(drModuleObject["PFS_MODULE_ID"]);
						m_sObjectCode = Convert.ToString(drModuleObject["OBJECT_CODE"]);
						m_sObjectName = Convert.ToString(drModuleObject["OBJECT_NAME"]);
						m_sObjectDescr = Convert.ToString(drModuleObject["OBJECT_DESCR"]);
						m_iIndexOrder = Convert.ToInt16(drModuleObject["INDEX_ORDER"]);
						m_sModuleCode = Convert.ToString(drModuleObject["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModuleObject["MODULE_NAME"]);
						m_oModuleObjectMemberCollection.DAL_LoadByModuleObjectID(m_iModuleObjectID);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }		
		
		public bool DAL_Load(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModuleObject = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectGet",iID))
            	{
					if(drModuleObject.Read())
            		{      
						m_iModuleObjectID = Convert.ToInt32(drModuleObject["PFS_MODULE_OBJECT_ID"]);
						m_iModuleID = Convert.ToInt32(drModuleObject["PFS_MODULE_ID"]);
						m_sObjectCode = Convert.ToString(drModuleObject["OBJECT_CODE"]);
						m_sObjectName = Convert.ToString(drModuleObject["OBJECT_NAME"]);
						m_sObjectDescr = Convert.ToString(drModuleObject["OBJECT_DESCR"]);
						m_iIndexOrder = Convert.ToInt16(drModuleObject["INDEX_ORDER"]);
						m_sModuleCode = Convert.ToString(drModuleObject["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModuleObject["MODULE_NAME"]);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		public bool DAL_LoadWithChild(int iID)
        {
			bool bIsSuccess = false;
            try
            {
				using(SqlDataReader drModuleObject = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "uspPFS_ModuleObjectGet",iID))
            	{
					if(drModuleObject.Read())
            		{      
						m_iModuleObjectID = Convert.ToInt32(drModuleObject["PFS_MODULE_OBJECT_ID"]);
						m_iModuleID = Convert.ToInt32(drModuleObject["PFS_MODULE_ID"]);
						m_sObjectCode = Convert.ToString(drModuleObject["OBJECT_CODE"]);
						m_sObjectName = Convert.ToString(drModuleObject["OBJECT_NAME"]);
						m_sObjectDescr = Convert.ToString(drModuleObject["OBJECT_DESCR"]);
						m_iIndexOrder = Convert.ToInt16(drModuleObject["INDEX_ORDER"]);
						m_sModuleCode = Convert.ToString(drModuleObject["MODULE_CODE"]);
						m_sModuleName = Convert.ToString(drModuleObject["MODULE_NAME"]);
						m_oModuleObjectMemberCollection.DAL_LoadByModuleObjectID(m_iModuleObjectID);
						bIsSuccess = true;
           		 	}
            	}
				return bIsSuccess;
			}
			catch(Exception ex)
			{
				throw ex;
			}
        }
		
		public bool DAL_Update() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_Update(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_Update(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iModuleObjectID > 0)
				{
					int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ModuleObjectUpdate",
					m_iModuleObjectID,
										m_iModuleID,
										m_sObjectCode,
										m_sObjectName,
										m_sObjectDescr,
										m_iIndexOrder
					));
					bIsSuccess = (iError == 0);
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}			
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		public bool DAL_UpdateWithChild() 
		{
			SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
			try
			{
				bool bIsSuccess = false;
				bIsSuccess = DAL_UpdateWithChild(oTrans);
				if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }
				
				oTrans.Commit();
                return true;
			}
			catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
		}		
		public bool DAL_UpdateWithChild(SqlTransaction p_oTrans) 
		{
			try
			{
				bool bIsSuccess = false;
				if (m_iModuleObjectID > 0)
				{
					int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ModuleObjectUpdate",
					m_iModuleObjectID,
										m_iModuleID,
										m_sObjectCode,
										m_sObjectName,
										m_sObjectDescr,
										m_iIndexOrder
					));
					bIsSuccess = (iError == 0);
					
					#region Delete appropriate child
					if (bIsSuccess)
					{
						//*** Retrieve the original list first
						ModuleObjectMemberCollection oModuleObjectMemberDeletedList = new ModuleObjectMemberCollection();			
						if (oModuleObjectMemberDeletedList.DAL_LoadByModuleObjectID(m_iModuleObjectID))
						{				
							//*** Then Compare to get deleted list
							foreach (ModuleObjectMember oModuleObjectMemberIterator in m_oModuleObjectMemberCollection)
							{
								//** Such a Hassle just to get a deleted list
								for (int i = 0; i < oModuleObjectMemberDeletedList.Count; i++)
								{
									if (oModuleObjectMemberDeletedList[i].ModuleObjectMemberID == oModuleObjectMemberIterator.ModuleObjectMemberID )
									{
										oModuleObjectMemberDeletedList.RemoveAt(i);
										break;
									}
								}
							}
							
							bIsSuccess = oModuleObjectMemberDeletedList.DAL_Delete(p_oTrans);
							if (!bIsSuccess) return bIsSuccess;
						}
					}								
					#endregion
					
					#region Update appropriate child
					if (bIsSuccess)
                    {
                        for (int i = 0; i < m_oModuleObjectMemberCollection.Count; i++)
                        {
                            m_oModuleObjectMemberCollection[i].ModuleObjectID = m_iModuleObjectID;
                        }
                        bIsSuccess = m_oModuleObjectMemberCollection.DAL_Update(p_oTrans);
						if (!bIsSuccess) return bIsSuccess;
						
                    }
					#endregion
				}
				else
				{
					bIsSuccess = DAL_Add(p_oTrans);
				}
							
				return (bIsSuccess);
			}
			catch (Exception ex)
			{
                throw ex;
			}
		}
		
		public bool DAL_Delete() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Delete(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans) 
        {
            try
            {
                #region Delete child first
				if (!m_oModuleObjectMemberCollection.DAL_Delete(p_oTrans)) return false;
				#endregion
										
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspPFS_ModuleObjectDelete", m_iModuleObjectID);

                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw (ex);
            }
        }	
        
		public bool DAL_Add() 
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                bool bIsSuccess = DAL_Add(oTrans);

                if (!bIsSuccess)
                {
                    oTrans.Rollback();
                    return false;
                }

                oTrans.Commit();
                return true;
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw (ex);
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
		public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iModuleObjectID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspPFS_ModuleObjectAdd", 

					m_iModuleID,
					m_sObjectCode,
					m_sObjectName,
					m_sObjectDescr,
					m_iIndexOrder
					));
					
				bool bIsSuccess = (m_iModuleObjectID >=0);
				
				#region Add appropriate child
				if (bIsSuccess)
				{
					if (bIsSuccess)
					{
						for (int i = 0; i < m_oModuleObjectMemberCollection.Count; i++)
						{
							m_oModuleObjectMemberCollection[i].ModuleObjectID = m_iModuleObjectID;
						}
						bIsSuccess = m_oModuleObjectMemberCollection.DAL_Add(p_oTrans);
					}
				}
				#endregion
				
				return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
		
		//*** This section is a temporary data access for combo, Radio Button etc. ToDo: Delete this and use the proper class definition
		public static SqlDataReader DAL_ModuleObjectModuleList()
		{
			try
			{
				SqlDataReader dr = SqlHelper.ExecuteReader(PFSHelper.DataAccessLayer.PFSDataBaseAccess.ConnectionString, "LOOKUP_uspPFS_ModuleObjectModuleList"); 
				return dr;
			}
			catch(Exception ex)
			{
				throw(ex);
			}			
		}		
		#endregion
	} //** Class
} //** Name Space
