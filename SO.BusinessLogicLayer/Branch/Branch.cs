using System;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2015, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
// $Log:$
//
#endregion

namespace SO.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.1
    public partial class Branch
    {
        #region Region: Member Variables///////////////////////////////////////////////////////
        protected int m_iBranchID = 0;
        protected string m_sBranchCode = "NONE";
        protected string m_sBranchName = "NONE";
        protected string m_sDescription = "NONE";
        protected bool m_bIsActive = false;
        protected bool m_bIsDeleted = false;
        protected DateTime m_dtCreateDate = DateTime.Parse("01/01/1900");
        protected int m_iCreateByUserID = 0;
        protected DateTime m_dtUpdateDate = DateTime.Parse("01/01/1900");
        protected int m_iUpdateByUserID = 0;
        #endregion

        #region Region: Constructor////////////////////////////////////////////////////////////
        public Branch()
        {
            m_iBranchID = -1;
        }
        public Branch(int iID)
        {
            m_iBranchID = iID;
        }
        public Branch(
            int iBranchID,
            string sBranchCode,
            string sBranchName,
            string sDescription,
            bool bIsActive,
            bool bIsDeleted,
            DateTime dtCreateDate,
            int iCreateByUserID,
            DateTime dtUpdateDate,
            int iUpdateByUserID
        )
        {
            m_iBranchID = iBranchID;
            m_sBranchCode = sBranchCode;
            m_sBranchName = sBranchName;
            m_sDescription = sDescription;
            m_bIsActive = bIsActive;
            m_bIsDeleted = bIsDeleted;
            m_dtCreateDate = dtCreateDate;
            m_iCreateByUserID = iCreateByUserID;
            m_dtUpdateDate = dtUpdateDate;
            m_iUpdateByUserID = iUpdateByUserID;
        }
        #endregion

        #region Region: Properties/////////////////////////////////////////////////////////////
        public int BranchID
        {
            get { return m_iBranchID; }
            set { m_iBranchID = value; }
        }
        public string BranchCode
        {
            get { return m_sBranchCode; }
            set { m_sBranchCode = value; }
        }
        public string BranchName
        {
            get { return m_sBranchName; }
            set { m_sBranchName = value; }
        }
        public string Description
        {
            get { return m_sDescription; }
            set { m_sDescription = value; }
        }
        public bool IsActive
        {
            get { return m_bIsActive; }
            set { m_bIsActive = value; }
        }
        public bool IsDeleted
        {
            get { return m_bIsDeleted; }
            set { m_bIsDeleted = value; }
        }
        public DateTime CreateDate
        {
            get { return m_dtCreateDate; }
            set { m_dtCreateDate = value; }
        }
        public int CreateByUserID
        {
            get { return m_iCreateByUserID; }
            set { m_iCreateByUserID = value; }
        }
        public DateTime UpdateDate
        {
            get { return m_dtUpdateDate; }
            set { m_dtUpdateDate = value; }
        }
        public int UpdateByUserID
        {
            get { return m_iUpdateByUserID; }
            set { m_iUpdateByUserID = value; }
        }
        #endregion

        #region Region: Data Access Methods////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspCOM_BranchGet", m_iBranchID))
                {
                    if (dr.Read())
                    {
                        m_iBranchID = Convert.ToInt32(dr["COM_BRANCH_ID"]);
                        m_sBranchCode = Convert.ToString(dr["BRANCH_CODE"]);
                        m_sBranchName = Convert.ToString(dr["BRANCH_NAME"]);
                        m_sDescription = Convert.ToString(dr["DESCRIPTION"]);
                        m_bIsActive = Convert.ToBoolean(dr["IS_ACTIVE"]);
                        m_bIsDeleted = Convert.ToBoolean(dr["IS_DELETED"]);
                        m_dtCreateDate = Convert.ToDateTime(dr["CREATE_DATE"]);
                        m_iCreateByUserID = Convert.ToInt32(dr["CREATE_BY_USER_ID"]);
                        m_dtUpdateDate = Convert.ToDateTime(dr["UPDATE_DATE"]);
                        m_iUpdateByUserID = Convert.ToInt32(dr["UPDATE_BY_USER_ID"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Load(int iID)
        {
            bool bIsSuccess = false;
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspCOM_BranchGet", iID))
                {
                    if (dr.Read())
                    {
                        m_iBranchID = Convert.ToInt32(dr["COM_BRANCH_ID"]);
                        m_sBranchCode = Convert.ToString(dr["BRANCH_CODE"]);
                        m_sBranchName = Convert.ToString(dr["BRANCH_NAME"]);
                        m_sDescription = Convert.ToString(dr["DESCRIPTION"]);
                        m_bIsActive = Convert.ToBoolean(dr["IS_ACTIVE"]);
                        m_bIsDeleted = Convert.ToBoolean(dr["IS_DELETED"]);
                        m_dtCreateDate = Convert.ToDateTime(dr["CREATE_DATE"]);
                        m_iCreateByUserID = Convert.ToInt32(dr["CREATE_BY_USER_ID"]);
                        m_dtUpdateDate = Convert.ToDateTime(dr["UPDATE_DATE"]);
                        m_iUpdateByUserID = Convert.ToInt32(dr["UPDATE_BY_USER_ID"]);
                        bIsSuccess = true;
                    }
                }
                return bIsSuccess;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Add(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                m_iBranchID = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspCOM_BranchAdd",

                    m_sBranchCode,
                    m_sBranchName,
                    m_sDescription,
                    m_bIsActive,
                    m_bIsDeleted,
                    m_dtCreateDate,
                    m_iCreateByUserID,
                    m_dtUpdateDate,
                    m_iUpdateByUserID
                ));
                if (m_iBranchID < 1) return false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Update(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                if (m_iBranchID > 0)
                {
                    int iError = Convert.ToInt32(SqlHelper.ExecuteScalar(p_oTrans, "uspCOM_BranchUpdate",
                        m_iBranchID,
                        m_sBranchCode,
                        m_sBranchName,
                        m_sDescription,
                        m_bIsActive,
                        m_bIsDeleted,
                        m_dtCreateDate,
                        m_iCreateByUserID,
                        m_dtUpdateDate,
                        m_iUpdateByUserID
                    ));
                    if (iError != 0) return false;
                }
                else return DAL_Add(p_oTrans);

                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Delete(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (SqlException ex)
            {
                oTrans.Rollback();
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                int iRowAffected = SqlHelper.ExecuteNonQuery(p_oTrans, "uspCOM_BranchDelete", m_iBranchID);
                return (iRowAffected > 0);
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}