using System;
using System.Collections;
using System.Data.SqlClient;
using PFSHelper.DataAccessLayer;

#region Region: Revision History///////////////////////////////////////////////////////////////
// Copyright (c) 2013, PT. Profescipta Wahanatehnik. All Rights Reserved.
//
// This software, all associated documentation, and all copies
// are CONFIDENTIAL INFORMATION of PT. Profescipta Wahanatehnik. 
// http://www.profescipta.com
//
// $Workfile:$
// $Revision:$
// $Date:$
//
// DESCRIPTION
//
//
// $Log:$
//
#endregion

namespace SO.BusinessLogicLayer
{
    //Standard class autogenerated by PFS Generator v5.1
    [System.Xml.Serialization.XmlRoot("ApprovalLogs")]
    public partial class ApprovalLogCollection : ICollection
    {
        #region Region: Member Variables///////////////////////////////////////////////////////
        private ArrayList m_oApprovalLogList = new ArrayList();
        #endregion
        #region Region: Properties/////////////////////////////////////////////////////////////
        public ApprovalLog this[int index]
        {
            get { return (ApprovalLog)m_oApprovalLogList[index]; }
        }
        public int Count
        {
            get { return m_oApprovalLogList.Count; }
        }
        public object SyncRoot
        {
            get { return this; }
        }
        public bool IsSynchronized
        {
            get { return false; }
        }
        #endregion
        #region Region: List Method////////////////////////////////////////////////////////////
        public void Sort(IComparer oComparer)
        {
            m_oApprovalLogList.Sort(oComparer);
        }
        public void Reverse()
        {
            m_oApprovalLogList.Reverse();
        }
        public void CopyTo(Array a, int index)
        {
            m_oApprovalLogList.CopyTo(a, index);
        }
        public IEnumerator GetEnumerator()
        {
            return m_oApprovalLogList.GetEnumerator();
        }
        public void Add(ApprovalLog oObject)
        {
            m_oApprovalLogList.Add(oObject);
        }
        public void RemoveAt(int index)
        {
            m_oApprovalLogList.RemoveAt(index);
        }
        public void Clear()
        {
            m_oApprovalLogList.Clear();
        }
        #endregion
        #region Region: Field Enumeration /////////////////////////////////////////////////////
        public enum ApprovalLogFields
        {
            ApprovalLogID,
            RefID,
            ModuleObjectMemberID,
            ApprovalStatusID,
            CreateDate,
            UpdateDate,
            CreateByUserID,
            UpdateByUserID,
            Detail,
            Remark,
            PreviousDetail,
            MemberCode,
            MemberName,
            ApprovalStatusCode
        }
        #endregion
        #region Region: Sort Method////////////////////////////////////////////////////////////
        public void Sort(ApprovalLogFields sortField, bool isAscending)
        {
            switch (sortField)
            {
                case ApprovalLogFields.ApprovalLogID:
                    this.Sort(new ApprovalLogIDComparer());
                    break;
                case ApprovalLogFields.RefID:
                    this.Sort(new RefIDComparer());
                    break;
                case ApprovalLogFields.ModuleObjectMemberID:
                    this.Sort(new ModuleObjectMemberIDComparer());
                    break;
                case ApprovalLogFields.ApprovalStatusID:
                    this.Sort(new ApprovalStatusIDComparer());
                    break;
                case ApprovalLogFields.CreateDate:
                    this.Sort(new CreateDateComparer());
                    break;
                case ApprovalLogFields.UpdateDate:
                    this.Sort(new UpdateDateComparer());
                    break;
                case ApprovalLogFields.CreateByUserID:
                    this.Sort(new CreateByUserIDComparer());
                    break;
                case ApprovalLogFields.UpdateByUserID:
                    this.Sort(new UpdateByUserIDComparer());
                    break;
                case ApprovalLogFields.Detail:
                    this.Sort(new DetailComparer());
                    break;
                case ApprovalLogFields.Remark:
                    this.Sort(new RemarkComparer());
                    break;
                case ApprovalLogFields.PreviousDetail:
                    this.Sort(new PreviousDetailComparer());
                    break;
                case ApprovalLogFields.MemberCode:
                    this.Sort(new MemberCodeComparer());
                    break;
                case ApprovalLogFields.MemberName:
                    this.Sort(new MemberNameComparer());
                    break;
                case ApprovalLogFields.ApprovalStatusCode:
                    this.Sort(new ApprovalStatusCodeComparer());
                    break;
            }
            if (!isAscending) this.Reverse();
        }
        #endregion
        #region Region: IComparer//////////////////////////////////////////////////////////////
        private sealed class ApprovalLogIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.ApprovalLogID.CompareTo(second.ApprovalLogID);
            }
        }
        private sealed class RefIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.RefID.CompareTo(second.RefID);
            }
        }
        private sealed class ModuleObjectMemberIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.ModuleObjectMemberID.CompareTo(second.ModuleObjectMemberID);
            }
        }
        private sealed class ApprovalStatusIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.ApprovalStatusID.CompareTo(second.ApprovalStatusID);
            }
        }
        private sealed class CreateDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.CreateDate.CompareTo(second.CreateDate);
            }
        }
        private sealed class UpdateDateComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.UpdateDate.CompareTo(second.UpdateDate);
            }
        }
        private sealed class CreateByUserIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.CreateByUserID.CompareTo(second.CreateByUserID);
            }
        }
        private sealed class UpdateByUserIDComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.UpdateByUserID.CompareTo(second.UpdateByUserID);
            }
        }
        private sealed class DetailComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.Detail.CompareTo(second.Detail);
            }
        }
        private sealed class RemarkComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.Remark.CompareTo(second.Remark);
            }
        }
        private sealed class PreviousDetailComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.PreviousDetail.CompareTo(second.PreviousDetail);
            }
        }
        private sealed class MemberCodeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.MemberCode.CompareTo(second.MemberCode);
            }
        }
        private sealed class MemberNameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.MemberName.CompareTo(second.MemberName);
            }
        }
        private sealed class ApprovalStatusCodeComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                ApprovalLog first = (ApprovalLog)x;
                ApprovalLog second = (ApprovalLog)y;
                return first.ApprovalStatusCode.CompareTo(second.ApprovalStatusCode);
            }
        }
        #endregion
        #region Region: Data Access Layer /////////////////////////////////////////////////////
        public bool DAL_Load()
        {
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspCOM_ApprovalLogList"))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            ApprovalLog oApprovalLog = new ApprovalLog();
                            oApprovalLog.ApprovalLogID = Convert.ToInt64(dr["COM_APPROVAL_LOG_ID"]);
                            oApprovalLog.RefID = Convert.ToInt32(dr["REF_ID"]);
                            oApprovalLog.ModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                            oApprovalLog.ApprovalStatusID = Convert.ToInt16(dr["COM_APPROVAL_STATUS_ID"]);
                            oApprovalLog.CreateDate = Convert.ToDateTime(dr["CREATE_DATE"]);
                            oApprovalLog.UpdateDate = Convert.ToDateTime(dr["UPDATE_DATE"]);
                            oApprovalLog.CreateByUserID = Convert.ToInt32(dr["CREATE_BY_USER_ID"]);
                            oApprovalLog.UpdateByUserID = Convert.ToInt32(dr["UPDATE_BY_USER_ID"]);
                            oApprovalLog.Detail = Convert.ToString(dr["DETAIL"]);
                            oApprovalLog.Remark = Convert.ToString(dr["REMARK"]);
                            oApprovalLog.PreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                            oApprovalLog.MemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                            oApprovalLog.MemberName = Convert.ToString(dr["MEMBER_NAME"]);
                            oApprovalLog.ApprovalStatusCode = Convert.ToString(dr["COM_APPROVAL_STATUS_CODE"]);
                            this.Add(oApprovalLog);
                        }
                        return true;
                    }
                    else return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_Load(
            string p_sKeyWords,
            object p_iRefID,
            object p_iModuleObjectMemberID,
            object p_iApprovalStatusID,
            object p_dtCreateDateFrom,
            object p_dtCreateDateTo,
            object p_dtUpdateDateFrom,
            object p_dtUpdateDateTo,
            object p_iCreateByUserID,
            object p_iUpdateByUserID


        )
        {
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(PFSDataBaseAccess.ConnectionString, "uspCOM_ApprovalLogList",
                    p_sKeyWords,
                    p_iRefID,
                    p_iModuleObjectMemberID,
                    p_iApprovalStatusID,
                    p_dtCreateDateFrom,
                    p_dtCreateDateTo,
                    p_dtUpdateDateFrom,
                    p_dtUpdateDateTo,
                    p_iCreateByUserID,
                    p_iUpdateByUserID

                ))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            ApprovalLog oApprovalLog = new ApprovalLog();
                            oApprovalLog.ApprovalLogID = Convert.ToInt64(dr["COM_APPROVAL_LOG_ID"]);
                            oApprovalLog.RefID = Convert.ToInt32(dr["REF_ID"]);
                            oApprovalLog.ModuleObjectMemberID = Convert.ToInt32(dr["PFS_MODULE_OBJECT_MEMBER_ID"]);
                            oApprovalLog.ApprovalStatusID = Convert.ToInt16(dr["COM_APPROVAL_STATUS_ID"]);
                            oApprovalLog.CreateDate = Convert.ToDateTime(dr["CREATE_DATE"]);
                            oApprovalLog.UpdateDate = Convert.ToDateTime(dr["UPDATE_DATE"]);
                            oApprovalLog.CreateByUserID = Convert.ToInt32(dr["CREATE_BY_USER_ID"]);
                            oApprovalLog.UpdateByUserID = Convert.ToInt32(dr["UPDATE_BY_USER_ID"]);
                            oApprovalLog.Detail = Convert.ToString(dr["DETAIL"]);
                            oApprovalLog.Remark = Convert.ToString(dr["REMARK"]);
                            oApprovalLog.PreviousDetail = Convert.ToString(dr["PREVIOUS_DETAIL"]);
                            oApprovalLog.MemberCode = Convert.ToString(dr["MEMBER_CODE"]);
                            oApprovalLog.MemberName = Convert.ToString(dr["MEMBER_NAME"]);
                            oApprovalLog.ApprovalStatusCode = Convert.ToString(dr["COM_APPROVAL_STATUS_CODE"]);
                            this.Add(oApprovalLog);
                        }
                        return true;
                    }
                    else return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_LoadByModuleObjectMemberID(int p_iID)
        {
            try
            {
                return DAL_Load(
                    null,
                    null,
                    p_iID,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null


                );
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool DAL_LoadByApprovalStatusID(int p_iID)
        {
            try
            {
                return DAL_Load(
                    null,
                    null,
                    null,
                    p_iID,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null


                );
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Add()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Add(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Add(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (ApprovalLog oApprovalLog in m_oApprovalLogList)
                {
                    if (!oApprovalLog.DAL_Add(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Update()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Update(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Update(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (ApprovalLog oApprovalLog in m_oApprovalLogList)
                {
                    if (!oApprovalLog.DAL_Update(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DAL_Delete()
        {
            SqlConnection oConn = PFSDataBaseAccess.OpenConnection();
            SqlTransaction oTrans = oConn.BeginTransaction();
            try
            {
                if (DAL_Delete(oTrans))
                {
                    oTrans.Commit();
                    return true;
                }
                else
                {
                    oTrans.Rollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                PFSDataBaseAccess.CloseConnection(ref oConn);
            }
        }
        public bool DAL_Delete(SqlTransaction p_oTrans)
        {
            try
            {
                foreach (ApprovalLog oApprovalLog in m_oApprovalLogList)
                {
                    if (!oApprovalLog.DAL_Delete(p_oTrans)) return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}